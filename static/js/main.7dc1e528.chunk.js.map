{"version":3,"sources":["constants/constant.jsx","services/login/authentication.jsx","pages/Login.jsx","components/register/Step1-UserInfo.js","components/register/Step2-Marketing.js","components/register/Step3-Notifications.js","components/register/Step4-Appearance.js","services/register/userCreation.jsx","components/register/StepFinal-Information.js","components/register/formValidation.js","components/register/StepForm.js","pages/Register.jsx","components/Navbar.jsx","components/FirstTimeSetup.jsx","components/dashboard/Title.jsx","components/dashboard/Chart.jsx","components/dashboard/WaterDrank.jsx","components/dashboard/Activities.jsx","components/dashboard/DashboardView.jsx","services/settings/ThemeSettings.jsx","pages/Dashboard.jsx","services/activities/activitiesGet.jsx","components/activities/visualisation/ActivitiesTable.jsx","components/activities/ActivitiesView.jsx","pages/Activities.jsx","services/post/postSet.jsx","components/social/card/createPost.jsx","services/post/postGet.jsx","components/social/visualisation/PostsTable.jsx","components/social/SocialView.jsx","pages/Social.jsx","services/activities/weightGet.jsx","components/weight/visualisation/WeightChart.jsx","components/weight/visualisation/WeightTable.jsx","services/activities/weightStore.jsx","components/weight/actionButton/weightInput.jsx","components/weight/WeightView.jsx","pages/Weight.jsx","services/activities/sleepGet.jsx","components/sleep/visualisation/SleepChart.jsx","components/sleep/visualisation/SleepTable.jsx","services/activities/sleepStore.jsx","components/sleep/actionButton/SleepInput.jsx","components/sleep/SleepView.jsx","pages/Sleep.jsx","services/settings/MarketingSettings.jsx","components/settings/preferences/SettingsAppearance.jsx","components/settings/preferences/SettingsMarketing.jsx","components/settings/preferences/SettingsNotifications.jsx","components/settings/preferences/SettingsPersonal.jsx","components/settings/SettingsView.jsx","pages/Settings.jsx","services/activities/waterIntakeGet.jsx","components/water/WaterIntakeChart.jsx","components/water/WaterIntakeTable.jsx","services/activities/waterIntakeStore.jsx","components/water/WaterIntakeInput.jsx","components/water/WaterIntakeView.jsx","pages/WaterIntake.jsx","static/Landing page/landingPage.jsx","static/Home page/home.jsx","static/Review page/review.jsx","static/Help page/help.jsx","index.jsx"],"names":["SpringHostURL","defaultPrimary","defaultSecondary","defaultDarkMode","username","password","axios","post","headers","then","response","sessionStorage","setItem","getUserDetails","axiosRequestTokenHeader","data","accessToken","catch","error","status","console","log","getItem","token","interceptors","request","use","config","Authentication","getAuthenticationStatus","authorization","removeItem","get","id","firstName","lastName","gender","emailAddress","dob","fitPoints","friend","apperance","notification","health","Copyright","Typography","variant","color","align","Link","href","Date","getFullYear","Login","props","state","loginPreloader","loginFailed","onUsernameChange","bind","onPasswordChange","loginSubmit","event","this","setState","target","value","setTimeout","getBearerToken","history","push","window","location","reload","classes","Grid","container","component","className","root","CssBaseline","item","xs","sm","md","image","Paper","elevation","square","paper","Avatar","avatar","form","noValidate","TextField","margin","required","fullWidth","label","name","autoComplete","autoFocus","onChange","type","FormControlLabel","control","Checkbox","Button","submit","onClick","Box","mt","Backdrop","backdrop","open","CircularProgress","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","Component","withStyles","theme","height","backgroundImage","backgroundRepeat","backgroundColor","palette","grey","backgroundSize","backgroundPosition","spacing","display","flexDirection","alignItems","secondary","main","width","marginTop","zIndex","drawer","UserInfo","handleNext","handleChange","values","date","email","formErrors","isValid","length","placeholder","helperText","utils","DateFnsUtils","InputLabelProps","shrink","format","dateArg","KeyboardButtonProps","FormControl","InputLabel","Select","MenuItem","style","justifyContent","disabled","useStyles","makeStyles","formControl","Marketing","handleBack","marketingEmail","marketingDailyEmailProgress","marketingWeeklyEmailProgress","marketingRoadmap","marketingProgress","marketingAchievements","handleCheckedChange","dateEventObj","checked","FormGroup","col","FormLabel","noWrap","marginRight","Notifications","notificationDaily","notificationWeekly","notificationMonthly","notificationWeight","notificationProgress","notificationAchievements","Appearance","primaryColour","secondaryColour","darkmode","avatarColour","highContrast","textSize","defaultValue","colourVal","gutterBottom","Slider","valueLabelDisplay","step","marks","min","max","marketingID","delete","notificationID","appearanceID","friendsID","age","currentDate","dateAsDate","monthCheck","getMonth","getDate","healthID","removeUserMarketing","removeUserNotification","removeUserAppearance","removeUserFriends","removeUserHealthPlan","createUserMarketing","createUserNotification","createUserAppearance","createUserFriends","createUserHealthPlan","cleanupMappings","Confirm","DOB","createUser","useHistory","signupPreloader","signupFailedUsername","signupFailed","getMarketingBool","setVariable","List","disablePadding","ListItem","ListItemText","primary","Divider","toLocaleDateString","marginLeft","UserRegistration","isText","RegExp","isEmail","isNumber","isUser","labels","initialValues","fieldsValidation","validate","minLength","maxLength","StepForm","useState","activeStep","setActiveStep","formValues","setFormValues","setFormErrors","prev","e","schema","test","formValidation","Stepper","alternativeLabel","map","Step","StepLabel","handleSteps","appBar","position","paddingRight","paddingLeft","svg","verticalAlign","layout","breakpoints","up","marginBottom","padding","App","AppBar","Toolbar","grow","flexGrow","menuButton","title","search","borderRadius","shape","fade","common","white","searchIcon","pointerEvents","inputRoot","inputInput","transition","transitions","create","sectionDesktop","list","fullList","topDivider","opacity","bottomDivider","fitPointsCentered","textAlign","Navbar","React","anchorEl","setAnchorEl","isMenuOpen","Boolean","handleMenuClose","drawerVisible","setDrawer","setDrawerHidden","require","hex","disableHoverAnimation","background","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","ListItemIcon","charAt","onMouseOver","justify","aria-label","Badge","badgeContent","clear","IconButton","edge","InputBase","input","inputProps","aria-controls","aria-haspopup","currentTarget","Drawer","anchor","onKeyDown","button","Home","ListOutlined","Group","FitnessCenter","DirectionsRun","NightsStay","FirstTimeSetup","show","intro","setIntro","mobileQuery","useMediaQuery","disableIntro","onStart","autoplay","mobile","media","src","alt","mediaBackgroundStyle","green","subtitle","blue","red","Title","children","dummyData","day","weight","Chart","useTheme","Fragment","ResponsiveContainer","BarChart","top","right","left","bottom","barSize","XAxis","stroke","text","dataKey","scale","YAxis","Label","angle","textAnchor","fill","Tooltip","Legend","CartesianGrid","strokeDasharray","Bar","preventDefault","depositContext","flex","WaterDrankGoal","WaterDrank","createData","activityName","description","amount","rows","seeMore","Activities","Table","size","TableHead","TableRow","TableCell","TableBody","row","appBarSpacer","mixins","toolbar","content","overflow","paddingTop","paddingBottom","fixedHeight","welcomeMessage","fontWeight","textShadow","transform","Dashboard","fixedHeightPaper","clsx","Container","maxWidth","lg","initialiseSettingMappings","getAppearanceData","appearanceResponse","primaryHexColour","secondaryHexColour","darkMode","avatarDefaultColour","updateAppearanceRecord","put","getPrimaryColour","undefined","getSecondaryColour","getDarkMode","ThemeSettings","storeAppearance","createMuiTheme","searchField","getActivityData","activityDataRes","userActivityRes","filter","userID","getUserActivity","activityDataFilter","RowsGrid","tableRows","setTableRow","useEffect","ActivitiesGet","getUserData","dataResponse","DataGridID","activityID","columns","field","headerName","components","GridToolbar","pageSize","rowsPerPageOptions","extendedIcon","ActivitiesView","createPostData","activityResponse","publicVisibility","friendsVisibility","tags","iconButton","divider","CustomizedInputBase","invalidPost","setPost","orientation","PostSet","createPost","getPostData","postData","userData","userIDList","a","filteredPosts","includes","mergedResponses","postMap","find","usrMap","responseWithoutID","PostTable","getPostsUserDetails","postID","sortable","SocialView","userActivityWeight","activityType","getWeightData","weightDataRes","userActivities","filteredWeights","activityMapping","weightMapping","getUserWeight","weightDataFilterMerge","chartData","setChartData","WeightGet","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","fillOpacity","unit","startDateTime","endDateTime","moodRating","caloriesBurnt","createActivity","createWeight","weightResponse","likertIcons","1","icon","2","3","4","5","IconContainer","other","WeightInput","setOpen","handleClose","setActivity","invalidDate","invalidWeight","activity","handleFormChange","Fab","parseInt","WeightStoreService","createRecord","InputProps","endAdornment","InputAdornment","Rating","getLabelText","IconContainerComponent","WeightView","Weight","userActivitySleep","getSleepData","sleepDataRes","filteredSleeps","sleepMapping","getUserSleep","sleepDataFilterMerge","SleepChart","SleepGet","SleepTable","sleepDate","sleepTime","awakeTime","sleepingHrs","createSleep","sleepResponse","SleepInput","invalidSleep","invalidAwake","isNaN","ActivityStartDateTime","getDay","getHours","getMinutes","getSeconds","getMilliseconds","springFormatSleepTime","toTimeString","split","ActivityEndDateTime","setDate","springFormatAwakeTime","valueOf","toFixed","SleepStoreService","timeArg","SleepView","Sleep","marketing","getMarketingData","marketingResponse","achievementsPreference","dailyEmailProgressPreference","marketingEmailPreference","marketingRoadmapPreference","progressPreference","weeklyEmailProgressPreference","updateMarketingRecord","headingsText","headingsTextAlt","settingLabel","switch","float","SettingsAppearance","getAppearanceSettings","appearance","setAppearance","handleCheckedAppearanceChange","setAppearanceState","handleCheckedAppearanceColourChange","fixed","xl","MarketingSettings","getMarketingState","setMarket","handleCheckedMarketingChange","setMarketingState","handleMarketChange","Switch","blankTOBEDONE","setNotification","handleCheckedNotificationChange","handleNotificationChange","SettingsPersonal","SettingsView","Settings","m","userActivityWaterIntake","getWaterIntakeData","waterIntakeDataRes","filteredWaterIntakes","waterIntakeMapping","getUserWaterIntake","WaterIntakeDataFilterMerge","WaterIntakeGet","waterIntake","createWaterIntake","waterIntakeResponse","WaterIntakeInput","invalidWaterIntake","WaterIntakeView","WaterIntake","LandingPage","data-layer","url","playing","loop","muted","defaultProps","About","preserveAspectRatio","viewBox","d","Review","Help","routs","exact","path","HomePage","HelpPage","ReviewPage","RedirectRoute","Register","AuthenticatedRoute","Social","Water","rest","render","to","pathname","from","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7dc1e528.chunk.js","sourcesContent":["//TODO: Team members working on a different machine to the one being hosted on - change the constant URL here!!!\r\n\r\n/*\r\nSetup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\n\r\nWhen testing on the local machine, use the localhost address\r\n\r\nWhen testing on other machines on your network - replace localhost with your internal LAN IP Address! \r\nYou will need to either allow your IP address in the Spring Security CORS config (JWTSecurityConfig.java) or use a browser extension to ignore CORS (unsafe!).\r\n*/\r\n\r\nexport const SpringHostURL = 'https://spring.fitify.tech'\r\n\r\n//Theme Constants\r\nexport const defaultPrimary = '#3f51b5'\r\nexport const defaultSecondary = '#f50057'\r\nexport const defaultDarkMode = 'light'","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\n//Authentication service class\r\n//Rebased off (TODO: Ref in report) https://github.com/in28minutes/spring-boot-react-fullstack-examples/blob/master/spring-boot-react-basic-auth-login-logout/frontend-spring-boot-react-basic-auth-login-logout/src/service/AuthenticationService.js\r\n//My implementation works differently by getting JWT access tokens from the Spring endpoint - if no token is return, the credentials are incorrect.\r\nclass Authentication {\r\n\r\n    //Method to get Authorisation Bearer token from JWT\r\n    //Request it using username and password parameters\r\n    getBearerToken(username, password){       \r\n        //Post the username and password as json to the auth endpoint\r\n        return axios.post(`${SpringHostURL}/authenticate`,{\r\n            username: username,\r\n            password: password\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then((response) => {\r\n            //The post method was successful and the AccessToken is recieved\r\n            //Debug (Log AccessToken to console for debug)\r\n            //console.log(response.data.accessToken)\r\n\r\n            //Store username in localStorage\r\n            sessionStorage.setItem(\"CurrentUsername\", username)\r\n            \r\n\r\n            //Store User Details in session\r\n            this.getUserDetails(username)\r\n\r\n            //Change Axios configuration to use accesstoken as Authorisation Bearer\r\n            this.axiosRequestTokenHeader(\"Bearer \" + response.data.accessToken)\r\n            sessionStorage.setItem(\"token\", response.data.accessToken)\r\n        })\r\n        .catch((error) => {\r\n            //The post method was not successful and some error has occured\r\n\r\n            /*\r\n            This could be Unauthorised (401) - incorrect user/password\r\n            This might be MethodArgumentNotValidException (400) - wrong arguments sent\r\n            Or something else (e.g. Spring server is down.)\r\n            */\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n            if(error.response.status === 401){\r\n                console.log(\"Error 401 - Incorrect user credentials\")\r\n                throw error\r\n                //Incorrect username/password\r\n            }else if(error.response.status === 400){\r\n                console.error(\"Error 400 - Incorrect React fronend arguments\")\r\n                throw error\r\n                //Axios returned incorrect arguments\r\n                //Check our code in the data arguments to make sure username and password is named correctly.\r\n                //Mainly react server error\r\n            }else{\r\n                console.error(\"Error: \" + error.response.status + \" - \" + error.response)\r\n                //Some other error to report back\r\n                throw error\r\n            }\r\n        })\r\n    }\r\n\r\n    //Method to test if user is authenticated\r\n    getAuthenticationStatus(){\r\n        return sessionStorage.getItem(\"CurrentUsername\") !== null\r\n    }\r\n    \r\n    //Method to setup accesstoken in header whilst using Axios\r\n    axiosRequestTokenHeader(token) {\r\n        //Intercept Axios request\r\n        axios.interceptors.request.use((config) => {\r\n            //If a username has been saved in the local storage (only after successful auth)\r\n            if (Authentication.getAuthenticationStatus()) {\r\n                //Set authorization header to accessToken\r\n                config.headers.authorization = token\r\n            }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n\r\n    //Method for logging out & emptying sessionStorage\r\n    logout() {\r\n        sessionStorage.removeItem(\"CurrentUsername\");\r\n    }\r\n\r\n    //Method to get Authorisation Bearer token from JWT\r\n    //Request it using username and password parameters\r\n    async getUserDetails(username){\r\n        //console.log('URL' +  `${SpringHostURL}/api/users/username/` + sessionStorage.getItem(\"CurrentUsername\"))\r\n        //Post the username and password as json to the auth endpoint\r\n        return axios.get(`${SpringHostURL}/api/users/username/` + username,{\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then((response) => {\r\n            //The username is retrieved successfully\r\n            //Store username in localStorage\r\n            sessionStorage.setItem(\"UserID\", response.data.id)\r\n            sessionStorage.setItem(\"FirstName\", response.data.firstName)\r\n            sessionStorage.setItem(\"LastName\", response.data.lastName)\r\n            sessionStorage.setItem(\"Gender\", response.data.gender)\r\n            sessionStorage.setItem(\"Email\", response.data.emailAddress)\r\n            sessionStorage.setItem(\"DOB\", response.data.dob)\r\n            sessionStorage.setItem(\"FitPoints\", response.data.fitPoints)\r\n            sessionStorage.setItem(\"friend\", response.data.friend)\r\n            sessionStorage.setItem(\"appearance\", response.data.apperance)\r\n            sessionStorage.setItem(\"notification\", response.data.notification)\r\n            sessionStorage.setItem(\"health\", response.data.health)\r\n        })\r\n        .catch((error) => {\r\n\r\n            //The post method was not successful and some error has occured\r\n\r\n            /*\r\n            This could be Unauthorised (401) - incorrect user/password\r\n            This might be MethodArgumentNotValidException (400) - wrong arguments sent\r\n            Or something else (e.g. Spring server is down.)\r\n            */\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n            if(error.response.status === 401){\r\n                console.log(\"Error 401 - Incorrect user credentials\")\r\n                throw error\r\n                //Incorrect username/password\r\n            }else if(error.response.status === 400){\r\n                console.error(\"Error 400 - Incorrect React fronend arguments\")\r\n                throw error\r\n                //Axios returned incorrect arguments\r\n                //Check our code in the data arguments to make sure username and password is named correctly.\r\n                //Mainly react server error\r\n            }else{\r\n                console.error(\"Error: \" + error.response.status + \" - \" + error.response)\r\n                //Some other error to report back\r\n                throw error\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new Authentication()","//Material-ui, login template\r\n//See https://github.com/mui-org/material-ui/edit/master/docs/src/pages/getting-started/templates/sign-in-side/SignInSide.js\r\n//Licensed with MIT license\r\n\r\n//Modified template layout and styling to match Fitify needs\r\nimport React, { Component } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Authentication from '../services/login/authentication';\r\n  \r\n//Dialog libraries\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n//Login preloader libraries\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n  const useStyles = theme => ({\r\n    root: {\r\n      height: '100vh',\r\n    },\r\n    image: {\r\n      backgroundImage: 'url(https://source.unsplash.com/1600x900/?fitness,diet,athletics,cycling,football,tennis,gym,walking,running,hiking,sking,workout,nature)',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundColor:\r\n        theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[900],\r\n      backgroundSize: 'cover',\r\n      backgroundPosition: 'center',\r\n    },\r\n    paper: {\r\n      margin: theme.spacing(8, 4),\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      alignItems: 'center',\r\n    },\r\n    avatar: {\r\n      margin: theme.spacing(1),\r\n      backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n      width: '100%', // Fix IE 11 issue.\r\n      marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n      margin: theme.spacing(3, 0, 2),\r\n    },\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: '#fff',\r\n    },\r\n  });\r\n  \r\n  function Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {'Copyright © '}\r\n        <Link color=\"inherit\" href=\"../../\">\r\n          Fitify\r\n        </Link>{' '}\r\n        {new Date().getFullYear()}\r\n        {'.'}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  class Login extends Component {\r\n\r\n    constructor(props) {\r\n      //Allow states to be referenced by this\r\n      super(props)\r\n\r\n      //Set user credentials states\r\n      this.state = {\r\n          username: '',\r\n          password: '',\r\n          loginPreloader: false,\r\n          loginFailed: false,\r\n      }\r\n\r\n      //Bind states to change methods\r\n      this.onUsernameChange = this.onUsernameChange.bind(this)\r\n      this.onPasswordChange = this.onPasswordChange.bind(this)\r\n\r\n      //Bind login submit\r\n      this.loginSubmit = this.loginSubmit.bind(this)\r\n    }\r\n\r\n    onUsernameChange (event) {\r\n      this.setState({ username : event.target.value});\r\n    }\r\n\r\n    onPasswordChange (event) {\r\n      this.setState({ password : event.target.value});\r\n    }\r\n\r\n    loginSubmit() {\r\n      //Reset message visibility\r\n      this.setState({ loginPreloader: true })\r\n      this.setState({ loginFailed: false })\r\n      \r\n      //Delay by 0.5 seconds to allow time for animations to work\r\n      setTimeout(function() {\r\n        //Attempt JWT Token authentication\r\n        Authentication.getBearerToken(this.state.username, this.state.password).then(() => {\r\n            //Stop Animation\r\n            this.setState({ loginPreloader: false })\r\n            //Redirect to dashboard after 0.3 seconds (to allow time for browser to populate sessionStorage)\r\n            setTimeout(function() {\r\n              this.props.history.push('/app/dashboard')\r\n              //Refresh page to ensure elements load\r\n              window.location.reload();\r\n            }.bind(this), 300)\r\n        }).catch(() => {\r\n            //Stop Animation\r\n            this.setState({ loginPreloader: false })\r\n            //Set to failed state - (display dialog on trigger of state change)\r\n            this.setState({ loginFailed: true })\r\n        })\r\n      }.bind(this), 500)\r\n    }\r\n\r\n    render(){\r\n      const { classes } = this.props;\r\n\r\n      return(\r\n        <Grid container component=\"main\" className={classes.root}>\r\n          <CssBaseline />\r\n          <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n          <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n            <div className={classes.paper}>\r\n              <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n              </Avatar>\r\n              <Typography component=\"h1\" variant=\"h5\">\r\n                Welcome back!\r\n              </Typography>\r\n              <Typography>Let's get fit once again with Fitify!</Typography>\r\n              <Typography>To use this application, please login with your credentials.</Typography>\r\n              <form className={classes.form} noValidate>\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"username\"\r\n                  label=\"Username\"\r\n                  name=\"username\"\r\n                  autoComplete=\"username\"\r\n                  autoFocus\r\n                  value={this.state.username}\r\n                  onChange={this.onUsernameChange}\r\n                />\r\n                <TextField\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  value={this.state.password}\r\n                  onChange={this.onPasswordChange}\r\n                />\r\n                <FormControlLabel\r\n                  control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                  label=\"Remember me\"\r\n                />\r\n                <Button\r\n                  //type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  onClick={this.loginSubmit}\r\n                >\r\n                  Sign In\r\n                </Button>\r\n                <Grid container>\r\n                  <Grid item xs>\r\n                    <Link href=\"#\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Link href=\"register\" variant=\"body2\">\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n                <Box mt={5}>\r\n                  <Copyright />\r\n                </Box>\r\n              </form>\r\n            </div>\r\n          </Grid>\r\n          <Backdrop className={classes.backdrop} open={this.state.loginPreloader} >\r\n            <CircularProgress color=\"inherit\" />\r\n          </Backdrop>\r\n          <Dialog open={this.state.loginFailed} onClose={() => this.setState({ loginFailed: false })} aria-labelledby=\"incorrect-credentials\" aria-describedby=\"login-failure\">\r\n          <DialogTitle id=\"alert-dialog-title\">{\"Incorrect Credentials\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              You have entered a incorrect username and/or password combination. Please try again, if you do not have a Fitify account - sign up instead.\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => this.setState({ loginFailed: false })} color=\"primary\" autoFocus>\r\n              Try again\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n\r\nexport default withStyles(useStyles)(Login)","import React, { Fragment } from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport FormControl from \"@material-ui/core/FormControl\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport InputLabel from \"@material-ui/core/InputLabel\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Link from '@material-ui/core/Link';\r\n\r\n//Material-Ui Pickers\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\n\r\n// Destructuring props\r\nconst UserInfo = ({ handleNext, handleChange, values: { firstName, lastName, username, password, date, email, gender }, formErrors }) => {\r\n\r\n  // Check if all values are not empty or if there are some error\r\n  const isValid =\r\n    firstName.length > 0 &&\r\n    !formErrors.firstName &&\r\n    lastName.length > 0 &&\r\n    !formErrors.lastName &&\r\n    username.length > 0 &&\r\n    !formErrors.username &&\r\n    password.length > 0 &&\r\n    !formErrors.password &&\r\n    email.length > 0 &&\r\n    !formErrors.email &&\r\n    gender.length > 0\r\n\r\n    //Custom method to handle Date object to be seen as a React SyntheticEvent by using the target object layout\r\n    const handleDateChange = (dateArg) => {\r\n      var dateEventObj = {\"target\": {\"name\": \"date\", \"value\": dateArg} }\r\n      handleChange(dateEventObj);\r\n    };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid container spacing={2} noValidate>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            placeholder=\"Your first name\"\r\n            margin=\"normal\"\r\n            value={firstName || \"\"}\r\n            onChange={handleChange}\r\n            error={!!formErrors.firstName}\r\n            helperText={formErrors.firstName}\r\n            required\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            placeholder=\"Your last name\"\r\n            margin=\"normal\"\r\n            value={lastName || \"\"}\r\n            onChange={handleChange}\r\n            error={!!formErrors.lastName}\r\n            helperText={formErrors.lastName}\r\n            required\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            placeholder=\"Your username\"\r\n            type=\"username\"\r\n            value={username || \"\"}\r\n            onChange={handleChange}\r\n            margin=\"normal\"\r\n            error={!!formErrors.username}\r\n            helperText={formErrors.username}\r\n            required\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            placeholder=\"Your password\"\r\n            type=\"password\"\r\n            value={password || \"\"}\r\n            onChange={handleChange}\r\n            margin=\"normal\"\r\n            error={!!formErrors.password}\r\n            helperText={formErrors.password}\r\n            required\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          \r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n              <KeyboardDatePicker\r\n              fullWidth\r\n              InputLabelProps={{\r\n                shrink: true\r\n              }}\r\n              margin=\"normal\"\r\n              id=\"date\"\r\n              label=\"Date of birth\"\r\n              format=\"dd/MM/yyyy\"\r\n              value={date || null}\r\n              onChange={handleDateChange}\r\n              //required\r\n              KeyboardButtonProps={{\r\n                'aria-label': 'change date',\r\n              }}\r\n            />\r\n        </MuiPickersUtilsProvider>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Email\"\r\n            name=\"email\"\r\n            placeholder=\"Your email address\"\r\n            type=\"email\"\r\n            value={email || \"\"}\r\n            onChange={handleChange}\r\n            margin=\"normal\"\r\n            error={!!formErrors.email}\r\n            helperText={formErrors.email}\r\n            required\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <FormControl fullWidth required margin=\"normal\">\r\n            <InputLabel>Gender</InputLabel>\r\n            <Select value={gender} onChange={handleChange} name=\"gender\">\r\n              <MenuItem value={\"Male\"}>Male</MenuItem>\r\n              <MenuItem value={\"Female\"}>Female</MenuItem>\r\n              <MenuItem value={\"Non-binary\"}>Non-binary</MenuItem>\r\n              <MenuItem value={\"Transgender\"}>Transgender</MenuItem>\r\n              <MenuItem value={\"Intersex\"}>Intersex</MenuItem>\r\n              <MenuItem value={\"NA\"}>I Prefer not to say</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <div style={{ display: \"flex\", marginTop: 50, justifyContent: \"flex-end\" }}>\r\n      <Grid container>\r\n          <Grid item xs>\r\n            <Link href=\"./login\" variant=\"body2\">\r\n              Already have an account? Login\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <Button variant=\"contained\" disabled={!isValid} color=\"primary\" onClick={isValid ? handleNext : null}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default UserInfo\r\n","import React from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n}));\r\n\r\n// Destructuring props\r\nconst Marketing = ({ handleNext, handleBack, handleChange, values: { marketingEmail, marketingDailyEmailProgress, marketingWeeklyEmailProgress, marketingRoadmap, marketingProgress, marketingAchievements }, formErrors }) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  // No validation required for checkboxes in this form\r\n  const isValid = true\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedChange = (event) => {\r\n    var dateEventObj = {\"target\": {\"name\": event.target.name, \"value\": event.target.checked} }\r\n    handleChange(dateEventObj);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <FormGroup col=\"true\">\r\n          <FormLabel component=\"legend\" >You can select your email marketing 📧 preferences below:</FormLabel>\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingEmail} onChange={handleCheckedChange} name=\"marketingEmail\" />}\r\n              label=\"📩 Marketing communications\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingDailyEmailProgress} onChange={handleCheckedChange} name=\"marketingDailyEmailProgress\" />}\r\n              label=\"📆 Daily health progress\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingWeeklyEmailProgress} onChange={handleCheckedChange} name=\"marketingWeeklyEmailProgress\" />}\r\n              label=\"📅 Weekly health progress\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingAchievements} onChange={handleCheckedChange} name=\"marketingAchievements\" />}\r\n              label=\"🏆 Achievements gained\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingRoadmap} onChange={handleCheckedChange} name=\"marketingRoadmap\" />}\r\n              label=\"🚗 Roadmap development plans\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={marketingProgress} onChange={handleCheckedChange} name=\"marketingProgress\" />}\r\n              label=\"🔧 Current development progress\"\r\n              className={classes.formControl}\r\n            />\r\n          </FormGroup>\r\n        </Grid>\r\n                \r\n        <Typography color=\"inherit\" noWrap>\r\n          We promise not to spam! 😀\r\n        </Typography>\r\n      </Grid>\r\n      <div style={{ display: \"flex\", marginTop: 50, justifyContent: \"flex-end\" }}>\r\n        <Button variant=\"contained\" color=\"default\" onClick={handleBack} style={{ marginRight: 10 }}>\r\n          Back\r\n        </Button>\r\n        <Button variant=\"contained\" disabled={!isValid} color=\"primary\" onClick={isValid ? handleNext : null}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Marketing\r\n","import React from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(0.5),\r\n  },\r\n}));\r\n\r\n// Destructuring props\r\nconst Notifications = ({ handleNext, handleBack, handleChange, values: { notificationDaily, notificationWeekly, notificationMonthly, notificationWeight, notificationProgress, notificationAchievements}, formErrors }) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  // No validation required for checkboxes in this form\r\n  const isValid = true\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedChange = (event) => {\r\n    var dateEventObj = {\"target\": {\"name\": event.target.name, \"value\": event.target.checked} }\r\n    handleChange(dateEventObj);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <FormGroup col>\r\n          <FormLabel component=\"legend\" >You can select your push notification 🔔 preferences below:</FormLabel>\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationDaily} onChange={handleCheckedChange} name=\"notificationDaily\" />}\r\n              label=\"📆 Daily activity\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationWeekly} onChange={handleCheckedChange} name=\"notificationWeekly\" />}\r\n              label=\"📅 Weekly activity\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationMonthly} onChange={handleCheckedChange} name=\"notificationMonthly\" />}\r\n              label=\"⌛ Monthly activity\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationWeight} onChange={handleCheckedChange} name=\"notificationWeight\" />}\r\n              label=\"🤸🏻 Missed weight recordings\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationProgress} onChange={handleCheckedChange} name=\"notificationProgress\" />}\r\n              label=\"🤸🏻‍♂️ Fitness progress\"\r\n              className={classes.formControl}\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox checked={notificationAchievements} onChange={handleCheckedChange} name=\"notificationAchievements\" />}\r\n              label=\"🏆 Achievements\"\r\n              className={classes.formControl}\r\n            />\r\n          </FormGroup>\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ display: \"flex\", marginTop: 50, justifyContent: \"flex-end\" }}>\r\n        <Button variant=\"contained\" color=\"default\" onClick={handleBack} style={{ marginRight: 10 }}>\r\n          Back\r\n        </Button>\r\n        <Button variant=\"contained\" disabled={!isValid} color=\"primary\" onClick={isValid ? handleNext : null}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Notifications\r\n","import React from \"react\"\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n\r\n// Destructuring props\r\nconst Appearance = ({ handleNext, handleBack, handleChange, values: { primaryColour, secondaryColour, avatarColour, darkmode, highContrast, textSize}, formErrors }) => {\r\n\r\n  // No validation required for checkboxes in this form\r\n  const isValid = true;\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedChange = (event) => {\r\n    var dateEventObj = {\"target\": {\"name\": event.target.name, \"value\": event.target.checked} }\r\n    handleChange(dateEventObj);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12}>\r\n          <ColorPicker\r\n            fullWidth\r\n            name='primaryColour'\r\n            label='primaryColour'\r\n            defaultValue={'◼ Primary Colour'}\r\n            value={primaryColour}\r\n            onChange={colourVal => handleChange({\"target\": {\"name\": \"primaryColour\", \"value\": colourVal} })}\r\n          \r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <ColorPicker\r\n            fullWidth\r\n            name='secondaryColour'\r\n            label='secondaryColour'\r\n            defaultValue={'◼ Secondary Colour'}\r\n            value={secondaryColour}\r\n            onChange={colourVal => handleChange({\"target\": {\"name\": \"secondaryColour\", \"value\": colourVal} })}\r\n          \r\n          />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}> \r\n          <Typography id=\"discrete-slider\" gutterBottom>\r\n            Font Size\r\n          </Typography>\r\n\r\n          <Grid container spacing={2}>\r\n            <Grid item>\r\n            <TextFormatIcon />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Slider\r\n                defaultValue={12}\r\n                aria-labelledby=\"discrete-slider\"\r\n                valueLabelDisplay=\"auto\"\r\n                step={2}\r\n                marks\r\n                min={10}\r\n                max={30}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n            <FormatSizeIcon />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n        <FormControlLabel\r\n              control={<Checkbox checked={darkmode} onChange={handleCheckedChange} name=\"darkmode\" />}\r\n              label=\"Dark Mode\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n        <FormControlLabel\r\n              control={<Checkbox checked={highContrast} onChange={handleCheckedChange} name=\"highContrast\" />}\r\n              label=\"High Contrast\"\r\n            />\r\n        </Grid>\r\n        \r\n      </Grid>\r\n      <div style={{ display: \"flex\", marginTop: 50, justifyContent: \"flex-end\" }}>\r\n        <Button variant=\"contained\" color=\"default\" onClick={handleBack} style={{ marginRight: 10 }}>\r\n          Back\r\n        </Button>\r\n        <Button variant=\"contained\" disabled={!isValid} color=\"primary\" onClick={isValid ? handleNext : null}>\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Appearance\r\n","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Import the logging in Authentication service to login the user after creating the account\r\nimport Authentication from '../login/authentication'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\n//User Creation service class\r\nclass userCreation {\r\n\r\n    //Method to create user marketing preferences\r\n    //If successful - the record will be created and the record ID will be returned\r\n    createUserMarketing(\r\n        marketingEmail,\r\n        marketingDailyEmailProgress,\r\n        marketingWeeklyEmailProgress,\r\n        marketingRoadmap,\r\n        marketingProgress,\r\n        marketingAchievements)\r\n    {\r\n        //Create marketing record for this user\r\n        //Use the marketing PostMapping to store this in the User Marketing table\r\n        return axios.post(`${SpringHostURL}/api/users/settings/marketing`,{\r\n            //Json Body content of marketing preferences\r\n            \"marketingEmailPreference\": marketingEmail,\r\n            \"dailyEmailProgressPreference\": marketingDailyEmailProgress,\r\n            \"weeklyEmailProgressPreference\": marketingWeeklyEmailProgress,\r\n            \"marketingRoadmapPreference\": marketingRoadmap,\r\n            \"progressPreference\": marketingProgress,\r\n            \"achievementsPreference\": marketingAchievements\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to remove mapping for marketingID\r\n    removeUserMarketing(marketingID){\r\n        return axios.delete(`${SpringHostURL}/api/users/settings/marketing/${marketingID}`,{},{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will only recognise json and not text)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error)\r\n        )\r\n    }\r\n\r\n    //Method to create user notifications preferences\r\n    //If successful - the record will be created and the record ID will be returned\r\n    createUserNotification(\r\n        notificationDaily,\r\n        notificationWeekly,\r\n        notificationMonthly,\r\n        notificationWeight,\r\n        notificationProgress,\r\n        notificationAchievements)\r\n    {\r\n        //Create notification record for this user\r\n        //Use the notification PostMapping to store this in the User Notification table\r\n        return axios.post(`${SpringHostURL}/api/users/settings/notification`,{\r\n            //Json Body content of notification preferences\r\n            \"dailyNotificationProgress\": notificationDaily,\r\n            \"weeklyNotificationProgress\": notificationWeekly,\r\n            \"monthlyNotificationProgress\": notificationMonthly,\r\n            \"weightNotification\": notificationWeight,\r\n            \"progressNotification\": notificationProgress,\r\n            \"achievementsNotification\": notificationAchievements\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch((error) => {\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n            console.error(\"[Error\", error.response.data.error, \"]\", \"creating notification:\" + error.response.data.error)\r\n            }\r\n        )\r\n    }\r\n\r\n    //Method to remove mapping for notificationID\r\n    removeUserNotification(notificationID){\r\n        return axios.delete(`${SpringHostURL}/api/users/settings/notification/${notificationID}`,{},{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will only recognise json and not text)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error)\r\n        )\r\n    }\r\n\r\n    //Method to create user appearance preferences\r\n    //If successful - the record will be created and the record ID will be returned\r\n    createUserAppearance(\r\n        primaryColour,\r\n        secondaryColour,\r\n        avatarColour,\r\n        darkmode,\r\n        highContrast,\r\n        textSize)\r\n    {\r\n            //Create appearance record for this user\r\n            //Use the appearance PostMapping to store this in the User Appearance table\r\n            return axios.post(`${SpringHostURL}/api/users/settings/appearance`,{\r\n                //Json Body content of appearance preferences\r\n                \"primaryHexColour\": primaryColour,\r\n                \"secondaryHexColour\": secondaryColour,\r\n                \"darkMode\": darkmode,\r\n                \"highContrast\": highContrast,\r\n                \"textSize\": textSize,\r\n                \"avatarDefaultColour\": avatarColour\r\n            },{\r\n                headers: {\r\n                    //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                    'Content-Type': 'application/json;charset=UTF-8',\r\n                    //\"Access-Control-Allow-Origin\": \"*\"\r\n                }\r\n            })        \r\n            //Successful Request - return the response\r\n            .then(response => response.data)\r\n            .catch((error) => {\r\n                //The post method was not successful and some error has occured\r\n\r\n                //To get error status, we can log it to the console using console.log(error.response.status)\r\n                //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n                console.error(\"[Error\", error.response.data.error, \"]\", \"creating user appearance:\" + error.response.data.error)\r\n                }\r\n            )\r\n    }\r\n\r\n    //Method to remove mapping for appearanceID\r\n    removeUserAppearance(appearanceID){\r\n        return axios.delete(`${SpringHostURL}/api/users/settings/appearance/${appearanceID}`,{},{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will only recognise json and not text)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error)\r\n        )\r\n    }\r\n\r\n    //Method to create user friends\r\n    //If successful - the record will be created and the record ID will be returned\r\n    createUserFriends()\r\n    {\r\n            //Create friends record for this user\r\n            //Use the appearance PostMapping to store this in the User Friends table\r\n            return axios.post(`${SpringHostURL}/api/users/friend`,{\r\n                //Json Body content of user friends\r\n                //TODO: This has to later be changed to a set of integers!\r\n                \"userFriendid\": 0,\r\n                \"friendIds\": 0\r\n            },{\r\n                headers: {\r\n                    //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                    'Content-Type': 'application/json;charset=UTF-8',\r\n                    //\"Access-Control-Allow-Origin\": \"*\"\r\n                }\r\n            })\r\n            //Successful Request - return the response\r\n            .then(response => response.data)\r\n            .catch((error) => {\r\n                //The post method was not successful and some error has occured\r\n\r\n                //To get error status, we can log it to the console using console.log(error.response.status)\r\n                //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n                console.error(\"[Error\", error.response.data.error, \"]\", \"creating friends:\" + error.response.data.error)\r\n                }\r\n            )\r\n    }\r\n\r\n    //Method to remove mapping for friendsID\r\n    removeUserFriends(friendsID){\r\n        return axios.delete(`${SpringHostURL}/api/users/friend/${friendsID}`,{},{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will only recognise json and not text)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error)\r\n        )\r\n    }\r\n\r\n    //Method to create user friends\r\n    //If successful - the record will be created and the record ID will be returned\r\n    createUserHealthPlan(date){\r\n        //Create friends record for this user\r\n        //Use the appearance PostMapping to store this in the User Friends table\r\n\r\n        var age = 0;\r\n\r\n        //Check if user has input DOB to work out age\r\n        if(date !== \"\"){\r\n            //Work out age of the user\r\n\r\n            //Set current date and dob as Date objects\r\n            var currentDate = new Date();\r\n            var dateAsDate = new Date(date);\r\n\r\n            //Work out age by subtracting year from today\r\n            age = currentDate.getFullYear() - dateAsDate.getFullYear();\r\n\r\n            //Check if it is the birthday month and that the birth day has not passed\r\n            var monthCheck = currentDate.getMonth() - dateAsDate.getMonth();\r\n\r\n            if (monthCheck < 0 || (monthCheck === 0 && currentDate.getDate() < dateAsDate.getDate())) {\r\n                age--;\r\n            }\r\n        }\r\n\r\n        return axios.post(`${SpringHostURL}/api/users/healthplan`,{\r\n            //Json Body content of user friends\r\n            \"fitPoints\": 0,\r\n            \"age\": age,\r\n            \"weight\": 0,\r\n            \"height\": 0,\r\n            \"bodyMassIndex\": 0,\r\n            \"basalMetabolicRate\": 0,\r\n            \"intakeCalories\": 0,\r\n            \"outtakeCalories\": 0,\r\n            \"targetWeight\": 0,\r\n            \"targetBMI\": 0\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch((error) => {\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n            console.error(\"[Error\", error.response.data.error, \"]\", \"creating healthplan:\" + error.response.data.error)\r\n            }\r\n        )\r\n    }\r\n\r\n    //Method to remove mapping for friendsID\r\n    removeUserHealthPlan(healthID){\r\n        return axios.delete(`${SpringHostURL}/api/users/healthplan/${healthID}`,{},{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will only recognise json and not text)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n            }\r\n        })\r\n        //Successful Request - return the response\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error)\r\n        )\r\n    }\r\n\r\n    //Method to remove mappings\r\n    async cleanupMappings(marketingID, notificationID, appearanceID, friendsID, healthID){\r\n        //Create user marketing record and store the record ID in marketingID\r\n        await this.removeUserMarketing(marketingID).then(response => console.log(\"Removal of Marketing: \", response));\r\n        \r\n        //Create user notification record and store the record ID in notificationID\r\n        await this.removeUserNotification(notificationID).then(response => console.log(\"Removal of Notification: \", response));\r\n        \r\n        //Create user appearance record and store the record ID in appearanceID\r\n        await this.removeUserAppearance(appearanceID).then(response => console.log(\"Removal of Appearance: \", response));\r\n\r\n        //Create user friends record and store the record ID in friendsID\r\n        await this.removeUserFriends(friendsID).then(response => console.log(\"Removal of Friend: \", response));\r\n\r\n        await this.removeUserHealthPlan(healthID).then(response => console.log(\"Removal of Health: \", response));\r\n    }\r\n\r\n    //Registration endpoint\r\n    async createUser(\r\n        //User information\r\n        firstName,\r\n        lastName,\r\n        username,\r\n        password,\r\n        email,\r\n        gender,\r\n        date,\r\n        //Marketing variables\r\n        marketingEmail,\r\n        marketingDailyEmailProgress,\r\n        marketingWeeklyEmailProgress,\r\n        marketingRoadmap,\r\n        marketingProgress,\r\n        marketingAchievements,\r\n        //Notification variables\r\n        notificationDaily,\r\n        notificationWeekly,\r\n        notificationMonthly,\r\n        notificationWeight,\r\n        notificationProgress,\r\n        notificationAchievements,\r\n        //Appearance variables\r\n        primaryColour,\r\n        secondaryColour,\r\n        avatarColour,\r\n        darkmode,\r\n        highContrast,\r\n        textSize)\r\n    {           \r\n            //The record ID's for the one-to-one mappings required for creating the user\r\n            //We need the marketing, notification, appearance, friends, health plan created before creating the user\r\n            var marketingID, notificationID, appearanceID, friendsID, healthID;\r\n\r\n            console.log('Marketing config: ', marketingEmail, marketingDailyEmailProgress, marketingWeeklyEmailProgress, marketingRoadmap, marketingProgress, marketingAchievements)\r\n            console.log('Notification config: ', notificationDaily, notificationWeekly, notificationMonthly, notificationWeight, notificationProgress, notificationAchievements)\r\n            console.log('Appearance config: ', primaryColour, secondaryColour, avatarColour, darkmode, highContrast, textSize)\r\n\r\n            //Create user marketing record and store the record ID in marketingID\r\n            await this.createUserMarketing(marketingEmail, marketingDailyEmailProgress, marketingWeeklyEmailProgress, marketingRoadmap, marketingProgress, marketingAchievements).then(response => marketingID = response);\r\n            \r\n            //Create user notification record and store the record ID in notificationID\r\n            await this.createUserNotification(notificationDaily, notificationWeekly, notificationMonthly, notificationWeight, notificationProgress, notificationAchievements).then(response => notificationID = response);\r\n            \r\n            //Create user appearance record and store the record ID in appearanceID\r\n            await this.createUserAppearance(primaryColour, secondaryColour, avatarColour, darkmode, highContrast, textSize).then(response => appearanceID = response);\r\n\r\n            //Create user friends record and store the record ID in friendsID\r\n            await this.createUserFriends().then(response => friendsID = response);\r\n\r\n            //Create user health plan record and store the record ID in healthID\r\n            await this.createUserHealthPlan(date).then(response => healthID = response);\r\n\r\n            await console.log(\"marketingID\",marketingID)\r\n\r\n            //Finally, we can create the user record in the Users table using the relevant Spring postmapping\r\n            await axios.post(`${SpringHostURL}/api/users/create`,{\r\n                \"username\": username,\r\n                \"passwordHash\": password,\r\n                \"role\": \"user\",\r\n                \"firstName\": firstName,\r\n                \"lastName\": lastName,\r\n                \"gender\": gender,\r\n                \"emailAddress\": email,\r\n                \"dob\": date,\r\n                \"fitPoints\": 0,\r\n                \"avatarImage\": \"\",\r\n                \"friend\": friendsID,\r\n                \"apperance\": appearanceID,\r\n                \"notification\": notificationID,\r\n                \"marketing\": marketingID,\r\n                \"health\": healthID\r\n            },{\r\n                headers: {\r\n                    //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                    'Content-Type': 'application/json;charset=UTF-8',\r\n                    //\"Access-Control-Allow-Origin\": \"*\"\r\n                }\r\n            }).then((response) => {\r\n                //The post method was successful and the user profile is created\r\n\r\n                //Authenticate user\r\n                Authentication.getBearerToken(username, password)\r\n\r\n                //Return user record id\r\n                return response.data\r\n            })\r\n            .catch((error) => {\r\n                //The post method was not successful and some error has occured\r\n\r\n                /*\r\n                This could be Unauthorised (401) - incorrect user/password\r\n                This might be MethodArgumentNotValidException (400) - wrong arguments sent\r\n                Or something else (e.g. Spring server is down.)\r\n                */\r\n\r\n                //To get error status, we can log it to the console using console.log(error.response.status)\r\n                //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n\r\n                //If the username is taken, remove the mapping entries made\r\n                this.cleanupMappings(marketingID, notificationID, appearanceID, friendsID, healthID);\r\n\r\n                throw error\r\n           })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default new userCreation()","import React, { Fragment } from \"react\"\r\nimport List from \"@material-ui/core/List\"\r\nimport ListItem from \"@material-ui/core/ListItem\"\r\nimport ListItemText from \"@material-ui/core/ListItemText\"\r\nimport Divider from \"@material-ui/core/Divider\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\n//Dialog libraries\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n//Login preloader libraries\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n//Import services\r\nimport UserRegistration from '../../services/register/userCreation';\r\nimport Authentication from '../../services/login/authentication';\r\n\r\n// Destructure props\r\nconst Confirm = ({ handleChange, handleBack, createUser, values }) => {\r\n\r\n  let history = useHistory();\r\n\r\n  const {\r\n    //User information\r\n    firstName,\r\n    lastName,\r\n    username,\r\n    password,\r\n    email,\r\n    gender,\r\n    date,\r\n    //Marketing variables\r\n    marketingEmail,\r\n    marketingDailyEmailProgress,\r\n    marketingWeeklyEmailProgress,\r\n    marketingRoadmap,\r\n    marketingProgress,\r\n    marketingAchievements,\r\n    //Notification variables\r\n    notificationDaily,\r\n    notificationWeekly,\r\n    notificationMonthly,\r\n    notificationWeight,\r\n    notificationProgress,\r\n    notificationAchievements,\r\n    //Appearance variables\r\n    primaryColour,\r\n    secondaryColour,\r\n    avatarColour,\r\n    darkmode,\r\n    highContrast,\r\n    textSize,\r\n    //Animation\r\n    signupPreloader,\r\n    signupFailedUsername,\r\n    signupFailed } = values\r\n    \r\n\r\n  const getDOB = (DOB) => {\r\n    if(DOB === \"\" || DOB === null){\r\n      return \"None provided\"\r\n    }else{\r\n      return DOB.toLocaleDateString()\r\n    }\r\n  };\r\n\r\n  const getMarketingBool = (name) => {\r\n    if(name){\r\n      return \"Yes\"\r\n    }else{\r\n      return \"No\"\r\n    }\r\n  };\r\n\r\n  const setVariable = (name,value) => {\r\n    var StepFormVar = {\"target\": {\"name\": name, \"value\": value} }\r\n    handleChange(StepFormVar);\r\n  };\r\n\r\n  const registerSubmit = () => {\r\n    //Start preloader animation\r\n    setVariable(\"signupPreloader\",true)\r\n    \r\n    //Delay by 0.5 seconds to allow time for animations to work\r\n    setTimeout(function() {\r\n      UserRegistration.createUser(\r\n        //User information\r\n        {firstName}.firstName,\r\n        {lastName}.lastName,\r\n        {username}.username,\r\n        {password}.password,\r\n        {email}.email,\r\n        {gender}.gender,\r\n        {date}.date,\r\n        //Marketing variables\r\n        {marketingEmail}.marketingEmail,\r\n        {marketingDailyEmailProgress}.marketingDailyEmailProgress,\r\n        {marketingWeeklyEmailProgress}.marketingWeeklyEmailProgress,\r\n        {marketingRoadmap}.marketingRoadmap,\r\n        {marketingProgress}.marketingProgress,\r\n        {marketingAchievements}.marketingAchievements,\r\n        //Notification variables\r\n        {notificationDaily}.notificationDaily,\r\n        {notificationWeekly}.notificationWeekly,\r\n        {notificationMonthly}.notificationMonthly,\r\n        {notificationWeight}.notificationWeight,\r\n        {notificationProgress}.notificationProgress,\r\n        {notificationAchievements}.notificationAchievements,\r\n        //Appearance variables\r\n        {primaryColour}.primaryColour,\r\n        {secondaryColour}.secondaryColour,\r\n        {avatarColour}.avatarColour,\r\n        {darkmode}.darkmode,\r\n        {highContrast}.highContrast,\r\n        {textSize}.textSize\r\n      ).then(() => {\r\n          //Stop animation\r\n          setVariable(\"signupPreloader\",false)\r\n\r\n          //Attempt to login with JWT Auth service\r\n          Authentication.getBearerToken({username}.username, {password}.password).then(() => {\r\n            //Set first time setup to true\r\n            sessionStorage.setItem(\"FirstTimeSetup\", true)\r\n            //Redirect to logged in dashboard\r\n            history.push('/app/dashboard')\r\n            window.location.reload();\r\n          })\r\n          \r\n      }).catch((error) => {\r\n          //Stop animation\r\n          setVariable(\"signupPreloader\",false)\r\n\r\n          //Error 500 is a data integerity error (the username already exists in the db) \r\n          if(error.response.status === 500){\r\n            setVariable(\"signupFailedUsername\",true)\r\n          }\r\n          else{\r\n            //Failed for any other issue - show dialog\r\n            setVariable(\"signupFailed\",true)\r\n          }\r\n      })\r\n    }.bind(), 500)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n\r\n      <Backdrop open={signupPreloader} style={{ zIndex: '1' }}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n\r\n      <Dialog open={signupFailedUsername} onClose={() => setVariable(\"signupFailedUsername\",false)} aria-labelledby=\"username-taken\" aria-describedby=\"signup-failure\">\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Invalid Details\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            The username you have selected has already been taken by another user. Please try to use a different username.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setVariable(\"signupFailedUsername\",false)} color=\"primary\" autoFocus>\r\n            Try again\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Dialog open={signupFailed} onClose={() => setVariable(\"signupFailed\",false)} aria-labelledby=\"incorrect-credentials\" aria-describedby=\"signup-failure\">\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Invalid Details\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            There was a error signing up using your details\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setVariable(\"signupFailed\",false)} color=\"primary\" autoFocus>\r\n            Try again\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <List disablePadding>\r\n        <ListItem>\r\n          <ListItemText primary=\"First Name\" secondary={firstName} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"Last Name\" secondary={lastName} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"Email Address\" secondary={email} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"Gender\" secondary={gender} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"Date of birth\" secondary={getDOB(date)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve marketing emails related to the Fitify project\" secondary={getMarketingBool(marketingEmail)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve daily emails regarding my health progress\" secondary={getMarketingBool(marketingDailyEmailProgress)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve weekly emails regarding my health progress\" secondary={getMarketingBool(marketingWeeklyEmailProgress)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve emails regarding roadmap development plans\" secondary={getMarketingBool(marketingRoadmap)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve emails regarding current development progress\" secondary={getMarketingBool(marketingProgress)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n        <ListItem>\r\n          <ListItemText primary=\"I wish to recieve emails regarding my achievements\" secondary={getMarketingBool(marketingAchievements)} />\r\n        </ListItem>\r\n\r\n        <Divider />\r\n\r\n      </List>\r\n\r\n      <div style={{ display: \"flex\", marginTop: 50, justifyContent: \"flex-end\" }}>\r\n        <Button variant=\"contained\" color=\"default\" onClick={handleBack}>\r\n          Back\r\n        </Button>\r\n        <Button style={{ marginLeft: 10 }} variant=\"contained\" color=\"secondary\" onClick={registerSubmit}>\r\n          Confirm & Continue\r\n        </Button>\r\n      </div>\r\n\r\n\r\n\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default Confirm","const isText = RegExp(/^[A-Z ]+$/i)\r\nconst isEmail = RegExp(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i)\r\nconst isNumber = RegExp(/^\\d+$/)\r\nconst isUser = RegExp(/^[a-zA-Z0-9]*$/)\r\n\r\nexport default function formValidation(name, value, schema) {\r\n  const { validate, minLength, maxLength } = schema[name]\r\n  let error = \"\"\r\n\r\n  if (minLength && value.length < minLength) error = `Minimum of ${minLength} characters are required.`\r\n  else if (maxLength && value.length > maxLength) error = `Maximum length of ${maxLength} exceeded!`\r\n  if (!validate) return\r\n\r\n  switch (validate) {\r\n    case \"text\":\r\n      if (!isText.test(value)) error = \"This field accepts text only.\"\r\n      break\r\n    \r\n    case \"username\":\r\n      if (!isUser.test(value)) error = \"This field accepts text and numbers only.\"\r\n    break\r\n\r\n    case \"number\":\r\n      if (!isNumber.test(value)) error = \"This field accepts numbers only.\"\r\n      break\r\n\r\n    case \"email\":\r\n      if (!isEmail.test(value)) error = \"Please enter a valid email address.\"\r\n      break\r\n\r\n    case \"checkbox\":\r\n      if (!value) error = \"Please select a value.\"\r\n      break\r\n\r\n    default:\r\n      break\r\n  }\r\n\r\n  return error\r\n}\r\n","import React, { useState } from \"react\"\r\nimport Box from \"@material-ui/core/Box\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Stepper from \"@material-ui/core/Stepper\"\r\nimport Step from \"@material-ui/core/Step\"\r\nimport StepLabel from \"@material-ui/core/StepLabel\"\r\nimport UserStep from \"./Step1-UserInfo\"\r\nimport MarketingStep from \"./Step2-Marketing\"\r\nimport NotificationStep from \"./Step3-Notifications\"\r\nimport AppearanceStep from \"./Step4-Appearance\"\r\nimport ConfirmStep from \"./StepFinal-Information\"\r\nimport formValidation from \"./formValidation\"\r\n\r\n// Step titles\r\nconst labels = [\"User Information\", \"Marketing Information\", \"Notification Settings\", \"Fitify Appearance\", \"Information summary\"]\r\n\r\nconst initialValues = {\r\n  //User Information variables\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  username: \"\",\r\n  password: \"\",\r\n  email: \"\",\r\n  gender: \"\",\r\n  date: \"\",\r\n  //Marketing variables\r\n  marketingEmail: false,\r\n  marketingDailyEmailProgress: false,\r\n  marketingWeeklyEmailProgress: false,\r\n  marketingRoadmap: false,\r\n  marketingProgress: false,\r\n  marketingAchievements: false,\r\n  //Notification variables\r\n  notificationDaily: false,\r\n  notificationWeekly: false,\r\n  notificationMonthly: false,\r\n  notificationWeight: false,\r\n  notificationProgress: false,\r\n  notificationAchievements: false,\r\n  //Appearance variables\r\n  primaryColour: \"#3f51b5\",\r\n  secondaryColour: \"#f50057\",\r\n  avatarColour: \"\",\r\n  darkmode: false,\r\n  highContrast: false,\r\n  textSize: 0,\r\n  //Register animations\r\n  signupPreloader: false,\r\n  signupFailedUsername: false,\r\n  signupFailed: false\r\n}\r\n\r\nconst fieldsValidation = {\r\n  firstName: {\r\n    error: \"\",\r\n    validate: \"text\",\r\n    minLength: 2,\r\n    maxLength: 20\r\n  },\r\n  lastName: {\r\n    error: \"\",\r\n    validate: \"text\",\r\n    minLength: 2,\r\n    maxLength: 20\r\n  },\r\n  username: {\r\n    error: \"\",\r\n    validate: \"username\",\r\n    minLength: 2,\r\n    maxLength: 20\r\n  },\r\n  password: {\r\n    error: \"\",\r\n    validate: \"password\",\r\n    minLength: 2,\r\n    maxLength: 255\r\n  },\r\n  email: {\r\n    error: \"\",\r\n    validate: \"email\"\r\n  },\r\n  gender: {},\r\n  date: {},\r\n  marketingEmail: {},\r\n  marketingDailyEmailProgress: {},\r\n  marketingWeeklyEmailProgress: {},\r\n  marketingRoadmap: {},\r\n  marketingProgress: {},\r\n  marketingAchievements: {},\r\n  notificationDaily: {},\r\n  notificationWeekly: {},\r\n  notificationMonthly: {},\r\n  notificationWeight: {},\r\n  notificationProgress: {},\r\n  notificationAchievements: {},\r\n  primaryColour: {},\r\n  secondaryColour: {},\r\n  avatarColour: {},\r\n  darkmode: {},\r\n  highContrast: {},\r\n  textSize: {},\r\n  signupPreloader: {},\r\n  signupFailedUsername: {},\r\n  signupFailed: {}\r\n}\r\n\r\n\r\nconst StepForm = () => {\r\n  const [activeStep, setActiveStep] = useState(0)\r\n  const [formValues, setFormValues] = useState(initialValues)\r\n  const [formErrors, setFormErrors] = useState({})\r\n\r\n  // Proceed to next step\r\n  const handleNext = () => setActiveStep(prev => prev + 1)\r\n  // Go back to prev step\r\n  const handleBack = () => setActiveStep(prev => prev - 1)\r\n\r\n  // Handle form change\r\n  const handleChange = e => {\r\n    \r\n    const { name, value } = e.target\r\n\r\n    console.log(\"name\", name);\r\n    console.log(\"val\", value)\r\n\r\n    if(e instanceof Date){\r\n      name.push();\r\n    }\r\n\r\n      // Set values\r\n      setFormValues(prev => ({\r\n        ...prev,\r\n        [name]: value\r\n      }))\r\n\r\n      // set errors\r\n      const error = formValidation(name, value, fieldsValidation) || \"\"\r\n\r\n      setFormErrors({\r\n        [name]: error\r\n      })\r\n\r\n  }\r\n\r\n  const handleSteps = step => {\r\n    switch (step) {\r\n      case 0:\r\n        return (\r\n          <UserStep handleNext={handleNext} handleChange={handleChange} values={formValues} formErrors={formErrors} />\r\n        )\r\n      case 1:\r\n        return (\r\n          <MarketingStep handleNext={handleNext} handleBack={handleBack} handleChange={handleChange} values={formValues} formErrors={formErrors} />\r\n        )\r\n      case 2:\r\n        return (\r\n          <NotificationStep handleNext={handleNext} handleBack={handleBack} handleChange={handleChange} values={formValues} formErrors={formErrors} />\r\n        )\r\n      case 3:\r\n        return (\r\n         <AppearanceStep handleNext={handleNext} handleBack={handleBack} handleChange={handleChange} values={formValues} formErrors={formErrors} />\r\n        )\r\n      case 4:\r\n        return <ConfirmStep handleNext={handleNext} handleBack={handleBack} handleChange={handleChange} values={formValues} />\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box style={{ margin: \"30px 0 50px\" }}>\r\n        <Typography variant=\"h4\" align=\"center\">\r\n          Fitify Registration\r\n        </Typography>\r\n        <Typography variant=\"subtitle2\" align=\"center\" style={{ margin: \"10px 0\" }}>\r\n          Get ready to control your health in minutes!\r\n        </Typography>\r\n      </Box>\r\n      <Stepper activeStep={activeStep} style={{ margin: \"30px 0 15px\" }} alternativeLabel>\r\n        {labels.map(label => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {handleSteps(activeStep)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default StepForm\r\n","import React from \"react\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport StepForm from \"../components/register/StepForm\"\r\nimport Link from \"@material-ui/core/Link\"\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\" © \"}\r\n      <Link color=\"inherit\" href=\"../../\">\r\n        Fitify\r\n      </Link>\r\n    </Typography>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    paddingRight: 10,\r\n    paddingLeft: 10\r\n  },\r\n  svg: {\r\n    verticalAlign: \"middle\"\r\n  },\r\n  layout: {\r\n    width: \"auto\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\"\r\n    }\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(8),\r\n      marginBottom: theme.spacing(8),\r\n      padding: theme.spacing(3)\r\n    }\r\n  }\r\n}))\r\n\r\nconst App = () => {\r\n  const classes = useStyles()\r\n  return (\r\n    <div className=\"App\">\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n            Fitify Registration\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <StepForm />\r\n        </Paper>\r\n        <Copyright />\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Material-ui AppBar libraries \r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\n//Import Material-ui menu\r\nimport Menu from '@material-ui/core/Menu';\r\n\r\n//Import Material-ui search bar\r\nimport InputBase from '@material-ui/core/InputBase';\r\n\r\n//Import Material-ui icons\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ExitToApp from '@material-ui/icons/ExitToApp';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport LocalDrinkIcon from '@material-ui/icons/LocalDrink';\r\n\r\n//Drawer Import\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\n\r\n//Drawer List Import\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n//Drawer List Icons Import\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { DirectionsRun, FitnessCenter, Group, Home, ListOutlined, NightsStay, Settings } from '@material-ui/icons';\r\n\r\n//import {  } from \"@material-ui/core/styles\";\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: 'none',\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'block',\r\n    },\r\n  },\r\n  search: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: fade(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(3),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  searchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  inputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  inputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    // vertical padding + font size from searchIcon\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('md')]: {\r\n      width: '20ch',\r\n    },\r\n  },\r\n  sectionDesktop: {\r\n    display: 'flex'\r\n  },\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  topDivider: {\r\n    opacity: '0.35',\r\n    marginBottom: '-18px',\r\n  },\r\n  bottomDivider: {\r\n    opacity: '0.35',\r\n  },\r\n  fitPointsCentered: {\r\n    margin: '0 47px -20px 47px',\r\n    textAlign: 'right',\r\n  }\r\n}));\r\n\r\nexport default function Navbar(props) {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  \r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuSettings = () => {\r\n    setAnchorEl(null);\r\n    history.push('/app/settings');\r\n  };\r\n\r\n  //Drawer Props\r\n  const [drawer, setDrawer] = React.useState({\r\n    drawerVisible: false\r\n  });\r\n\r\n  //Drawer Visibility methods\r\n  const setDrawerVisible = () => {\r\n    setDrawer({drawerVisible: true});\r\n  };\r\n\r\n  const setDrawerHidden = () => {\r\n    setDrawer({drawerVisible: false});\r\n  };\r\n\r\n  const userLogout = () => {\r\n    sessionStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const getUsername = () => {\r\n      setTimeout(function() {\r\n          return sessionStorage.getItem(\"CurrentUsername\");\r\n      }, 50);\r\n  }\r\n\r\n  //Avatar Colour styling\r\n  //Import color-hash\r\n  var ColorHash = require('color-hash');\r\n  //Instantiate color-hash object\r\n  var colorHashObj = new ColorHash();\r\n\r\n  //Set the styling of the avatarColour constant\r\n  const avatarColour = {\r\n    //Set background colour to the hashed (Hash algorithm: String -> Hex) colour value of username\r\n    backgroundColor: colorHashObj.hex(getUsername())\r\n  };\r\n  \r\n  //Set background color to transparent on the passed element\r\n  function disableHoverAnimation(e) {\r\n    e.target.style.background = 'transparent';\r\n  }\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n\r\n      <MenuItem onClick={handleMenuClose}>\r\n        <ListItemIcon>\r\n          <Avatar style={avatarColour}>{sessionStorage.getItem(\"FirstName\").charAt(0)}</Avatar>\r\n        </ListItemIcon>\r\n        <Typography variant=\"inherit\" display=\"inline\">{sessionStorage.getItem(\"FirstName\")} {sessionStorage.getItem(\"LastName\")}</Typography>\r\n      </MenuItem>\r\n\r\n      <MenuItem className={classes.topDivider} onMouseOver={disableHoverAnimation}>\r\n      ───────────────\r\n      </MenuItem>\r\n\r\n      <MenuItem className={classes.fitPointsCentered}>\r\n        <Typography align='center' justify='center' variant=\"inherit\">{sessionStorage.getItem(\"FitPoints\")} FitPoints</Typography>\r\n      </MenuItem>\r\n      \r\n      <MenuItem className={classes.bottomDivider} onMouseOver={disableHoverAnimation}>\r\n      ───────────────\r\n      </MenuItem>\r\n      \r\n      <MenuItem>\r\n        <ListItemIcon aria-label=\"show 4 new mails\" color=\"inherit\">\r\n            <MailIcon />\r\n            <Badge badgeContent={4} color=\"secondary\">\r\n            </Badge>\r\n        </ListItemIcon>\r\n        <Typography variant=\"inherit\">Messages</Typography>\r\n      </MenuItem>\r\n\r\n      <MenuItem onClick={handleMenuSettings}>\r\n          <ListItemIcon>\r\n            <SettingsIcon />\r\n          </ListItemIcon>\r\n          <Typography variant=\"inherit\">Settings</Typography>\r\n      </MenuItem>\r\n\r\n      <MenuItem onClick={userLogout}>\r\n          <ListItemIcon>\r\n            <ExitToApp />\r\n          </ListItemIcon>\r\n          <Typography variant=\"inherit\">Logout</Typography>\r\n      </MenuItem>\r\n\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={setDrawerVisible}\r\n            >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          \r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            {props.title}\r\n          </Typography>\r\n\r\n          <div className={classes.search}>\r\n          <div className={classes.searchIcon}>\r\n            <SearchIcon />\r\n          </div>\r\n          <InputBase\r\n            placeholder=\"Search…\"\r\n            classes={{\r\n              root: classes.inputRoot,\r\n              input: classes.inputInput,\r\n            }}\r\n            inputProps={{ 'aria-label': 'search' }}/>\r\n          </div>\r\n\r\n          <div className={classes.grow}/>\r\n          <div className={classes.sectionDesktop}>\r\n\r\n            <IconButton color=\"inherit\">\r\n              <Badge badgeContent={9} color=\"secondary\">\r\n                <NotificationsIcon />\r\n              </Badge>\r\n            </IconButton>\r\n\r\n            <IconButton\r\n              aria-label=\"Your Account\"\r\n              aria-controls={menuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleProfileMenuOpen}\r\n              color=\"inherit\">\r\n              <AccountCircle />\r\n            </IconButton>\r\n\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Drawer\r\n        anchor=\"left\"\r\n        open={drawer.drawerVisible}\r\n        onClose={setDrawerHidden}\r\n      >\r\n        <div\r\n          onClick={setDrawerHidden}\r\n          onKeyDown={setDrawerHidden}\r\n        >\r\n          <List className={classes.list}>\r\n            <ListItem button onClick={() => history.push('/app/dashboard')}>\r\n\r\n              <ListItemIcon>  \r\n                <Home />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Dashboard\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button onClick={() => history.push('/app/activities')}>\r\n              \r\n              <ListItemIcon>  \r\n                <ListOutlined />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Activities\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button onClick={() => history.push('/app/social')}>\r\n              \r\n              <ListItemIcon>  \r\n                <Group />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Social\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button onClick={() => history.push('/app/settings')}>\r\n              \r\n              <ListItemIcon>  \r\n                <Settings />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Settings\" />\r\n\r\n            </ListItem>\r\n\r\n            <Divider />\r\n\r\n            <ListItem button onClick={() => history.push('/app/weight')}>\r\n              \r\n              <ListItemIcon>  \r\n                <FitnessCenter />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Weight\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button>\r\n              \r\n              <ListItemIcon>  \r\n                <DirectionsRun />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Physical Movement\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button onClick={() => history.push('/app/sleep')}>\r\n              \r\n              <ListItemIcon>  \r\n                <NightsStay />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Sleep\" />\r\n\r\n            </ListItem>\r\n\r\n            <ListItem button onClick={() => history.push('/app/water')}>\r\n              \r\n              <ListItemIcon>  \r\n                <LocalDrinkIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Water Intake\" />\r\n\r\n            </ListItem>\r\n\r\n          </List>\r\n        </div>\r\n      </Drawer>\r\n\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { red, blue, green } from \"@material-ui/core/colors\";\r\nimport { AutoRotatingCarousel, Slide } from \"material-auto-rotating-carousel\";\r\n\r\nexport default function FirstTimeSetup(props) {\r\n   \r\n    const [intro, setIntro] = useState({ show: false });\r\n    const mobileQuery = useMediaQuery(\"(max-width:600px)\");\r\n\r\n    //Check if user has just been registered and that the intro has not been shown.\r\n    if(sessionStorage.getItem(\"FirstTimeSetup\") === 'true' && intro.show === false){\r\n        //Show the intro\r\n        setIntro({ show: true })\r\n    }\r\n\r\n    //Disabling the intro requires changing the state here and the Session\r\n    const disableIntro = () => {\r\n        setIntro({ show: false })\r\n        sessionStorage.setItem(\"FirstTimeSetup\",false)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <AutoRotatingCarousel\r\n        label=\"Get started\"\r\n        open={intro.show}\r\n        onClose={disableIntro}\r\n        onStart={disableIntro}\r\n        autoplay={false}\r\n        mobile={mobileQuery}\r\n        style={{ position: \"absolute\" }}\r\n      >\r\n        <Slide\r\n          media={\r\n            <img src=\"https://raw.githubusercontent.com/BrunelCS/cs2001-2020_21-group7/main/docs/frontend-spring/prototyping-interfaces/logos/Version%205.png?token=AR2BK7NPVWQEI3UZOB6FN6LAHVGYA\" alt=\"Welcome to Fitify\"/>\r\n          }\r\n          mediaBackgroundStyle={{ backgroundColor: green[400] }}\r\n          style={{ backgroundColor: green[600] }}\r\n          title=\"Hi! Welcome to Fitify\"\r\n          subtitle=\"Let's give you a quick intro.\"\r\n        />\r\n        <Slide\r\n          media={\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-512/workout-40-1100757.png\" alt=\"Physical Activity\"/>\r\n          }\r\n          mediaBackgroundStyle={{ backgroundColor: blue[400] }}\r\n          style={{ backgroundColor: blue[600] }}\r\n          title=\"Wanted to track your physical activity?\"\r\n          subtitle=\"In a couple of clicks under your 'Activities' section you are able to do so.\"\r\n        />\r\n        <Slide\r\n          media={\r\n            <img src=\"https://cdn.iconscout.com/icon/free/png-256/chat-2639493-2187526.png\" alt=\"Social Features\"/>\r\n          }\r\n          mediaBackgroundStyle={{ backgroundColor: red[400] }}\r\n          style={{ backgroundColor: red[600] }}\r\n          title=\"How about socialising with other Fitify users?\"\r\n          subtitle=\"No problem. Your dashboard contains your social feed.\"\r\n        />\r\n      </AutoRotatingCarousel>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Title(props) {\r\n  return (\r\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n      {props.children}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTitle.propTypes = {\r\n  children: PropTypes.node,\r\n};","import React from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport { LineChart, Line, XAxis, YAxis, Label, ResponsiveContainer, BarChart, Bar, CartesianGrid, Tooltip, Legend } from 'recharts';\r\n// import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n// import { BarChart, Bar, CartesianGrid, Tooltip, Legend} from 'recharts';\r\nimport Title from './Title';\r\n\r\n// Generate Sales Data\r\nfunction createData(time, amount) {\r\n  return { time, amount };\r\n}\r\n\r\n// Old Data Set\r\n// const data = [\r\n//   createData('Day 1', 79),\r\n//   createData('2', 79),\r\n//   createData('3', 80),\r\n//   createData('4', 80),\r\n//   createData('5', 82),\r\n//   createData('6', 81),\r\n//   createData('7', 79),\r\n//   createData('8', 77),\r\n//   createData('9', 75),\r\n//   createData('10', 75),\r\n//   createData('11', 76),\r\n//   createData('12', 76),\r\n//   createData('13', 74),\r\n//   createData('14', 75),\r\n//   createData('15', 74)\r\n// ];\r\n\r\nconst dummyData = [\r\n  {\r\n    day: \"Day 1\",\r\n    weight: 77.0\r\n  },\r\n  {\r\n    day: \"Day 2\",\r\n    weight: 75.5\r\n  },\r\n  {\r\n    day: \"Day 3\",\r\n    weight: 76.3\r\n  },\r\n  {\r\n    day: \"Day 4\",\r\n    weight: 75.9\r\n  },\r\n  {\r\n    day: \"Day 5\",\r\n    weight: 74.1\r\n  },\r\n  {\r\n    day: \"Day 6\",\r\n    weight: 75.2\r\n  },\r\n  {\r\n    day: \"Day 7\",\r\n    weight: 74.6\r\n  },\r\n  {\r\n    day: \"Day 8\",\r\n    weight: 73.3\r\n  },\r\n  {\r\n    day: \"Day 9\",\r\n    weight: 73.9\r\n  },\r\n  {\r\n    day: \"Day 10\",\r\n    weight: 74.4\r\n  },\r\n  {\r\n    day: \"Day 11\",\r\n    weight: 75.0\r\n  },\r\n  {\r\n    day: \"Day 12\",\r\n    weight: 75.6\r\n  },\r\n  {\r\n    day: \"Day 13\",\r\n    weight: 76.1\r\n  },\r\n  {\r\n    day: \"Day 14\",\r\n    weight: 77.5\r\n  }\r\n];\r\n\r\nexport default function Chart() {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Your Weight - last 14 Days</Title>\r\n      <ResponsiveContainer>\r\n        {/* <LineChart\r\n          data={data}\r\n          margin={{\r\n            top: 16,\r\n            right: 16,\r\n            bottom: 0,\r\n            left: 24,\r\n          }}\r\n        >\r\n          <XAxis dataKey=\"time\" stroke={theme.palette.text.secondary} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}\r\n            >\r\n              (kg)\r\n            </Label>\r\n          </YAxis>\r\n          <Line type=\"monotone\" dataKey=\"amount\" stroke={theme.palette.primary.main} dot={false} />\r\n        </LineChart> */}\r\n\r\n        <BarChart\r\n          data={dummyData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n          barSize={10}\r\n        >\r\n          <XAxis stroke={theme.palette.text.secondary} dataKey=\"day\" scale=\"point\" padding={{ left: 30, right: 30 }} />\r\n          <YAxis stroke={theme.palette.text.secondary}>\r\n            <Label\r\n              angle={270}\r\n              position=\"left\"\r\n              style={{ textAnchor: 'middle', fill: theme.palette.text.primary }}>\r\n                (kg)\r\n            </Label>\r\n          </YAxis>\r\n          <Tooltip />\r\n          <Legend />\r\n          <CartesianGrid strokeDasharray=\"2 2\" />\r\n          <Bar dataKey=\"weight\" fill={theme.palette.primary.main} background={{ fill: \"rgba(0,0,0,0.15)\" }} />\r\n        </BarChart>\r\n\r\n      </ResponsiveContainer>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Title from './Title';\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  depositContext: {\r\n    flex: 1,\r\n  },\r\n  WaterDrankGoal: {\r\n    opacity: 0.4,\r\n    display: 'inline'\r\n  }\r\n});\r\n\r\nexport default function WaterDrank() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Water Drank</Title>\r\n      <Typography component=\"p\" variant=\"h4\">\r\n        1.35L <div className={classes.WaterDrankGoal} color='secondary'>/ 2L</div>\r\n      </Typography>\r\n      <Typography color=\"textSecondary\" className={classes.depositContext}>\r\n        today\r\n      </Typography>\r\n      <div>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          Change your goal (2L)\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","import React from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Title from './Title';\r\n\r\n// Dummy Activity Data (prepared for backend implementation)\r\nfunction createData(id, activityName, description, amount, date) {\r\n  return { id, activityName, description, amount, date };\r\n}\r\n\r\nconst rows = [\r\n  createData(0, 'Weight recorded', '', '74Kg', '16 Mar, 2019'),\r\n  createData(1, 'Water intake recorded', '', '0.5L', '16 Mar, 2019'),\r\n  createData(2, 'Water intake recorded', '', '1.2L', '16 Mar, 2019'),\r\n  createData(3, 'Sleep recorded', '', '5 hours total', '16 Mar, 2019'),\r\n  createData(4, 'Water intake recorded', '', '1.2L', '16 Mar, 2019'),\r\n];\r\n\r\nfunction preventDefault(event) {\r\n  event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  seeMore: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function Activities() {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <Title>Activity log</Title>\r\n      <Table size=\"small\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Activity Name</TableCell>\r\n            <TableCell>Description</TableCell>\r\n            <TableCell>Amount</TableCell>\r\n            <TableCell>Date</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.id}>\r\n              <TableCell>{row.activityName}</TableCell>\r\n              <TableCell>{row.description}</TableCell>\r\n              <TableCell>{row.amount}</TableCell>\r\n              <TableCell>{row.date}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n      <div className={classes.seeMore}>\r\n        <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n          See more activities\r\n        </Link>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}","// Base imports\r\nimport React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// Chart and components\r\nimport Chart from './Chart';\r\nimport WaterDrank from './WaterDrank';\r\nimport Activities from './Activities';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: '100vh',\r\n    overflow: 'auto',\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4),\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: 'flex',\r\n    overflow: 'auto',\r\n    flexDirection: 'column',\r\n  },\r\n  fixedHeight: {\r\n    height: 240,\r\n  },\r\n  welcomeMessage: {\r\n    fontWeight: 'bold',\r\n    textShadow: '4px 4px black',\r\n    transform: 'translateX(2rem)'\r\n  }\r\n}));\r\n\r\nexport default function Dashboard() {\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <main className={classes.content}>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container maxWidth=\"lg\" className={classes.container}>\r\n          <Grid container spacing={3}>\r\n            {/* Welcome message */}\r\n            <Grid item xs={12}>\r\n              <Typography className={classes.welcomeMessage} variant='h2' color='primary'>Welcome back, {sessionStorage.getItem('FirstName')}</Typography>\r\n            </Grid>\r\n            {/* Chart */}\r\n            <Grid item xs={12} md={8} lg={9}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <Chart />\r\n              </Paper>\r\n            </Grid>\r\n            {/* Water Usage */}\r\n            <Grid item xs={12} md={4} lg={3}>\r\n              <Paper className={fixedHeightPaper}>\r\n                <WaterDrank />\r\n              </Paper>\r\n            </Grid>\r\n            {/* Recent Activities */}\r\n            <Grid item xs={12}>\r\n              <Paper className={classes.paper}>\r\n                <Activities />\r\n              </Paper>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </main>\r\n    </div>\r\n  );\r\n}","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL, defaultPrimary, defaultSecondary } from '../../constants/constant'\r\n\r\nclass ThemeSettings {\r\n\r\n    //Method to get all appearance settings\r\n    async getAppearanceSettings(){\r\n        var appearanceID;\r\n\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => appearanceID = response.apperance);\r\n\r\n        const appearanceResponse = await this.getAppearanceData(appearanceID)\r\n\r\n        return appearanceResponse\r\n    }\r\n\r\n    //Method to get state value from appearance records\r\n    async getAppearanceState(state){\r\n        var appearanceID, value;\r\n\r\n        //Get Marketing mapping id\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => appearanceID = response.apperance);\r\n\r\n        //Store the response from the marketing data of this user temporarily\r\n        const appearanceResponse = await this.getAppearanceData(appearanceID)\r\n\r\n        //Check which state to change\r\n        if(state === 'primaryHexColour'){\r\n            value = appearanceResponse.primaryHexColour;\r\n        }else if(state === 'secondaryHexColour'){\r\n            value = appearanceResponse.secondaryHexColour;\r\n        }else if(state === 'darkMode'){\r\n            value = appearanceResponse.darkMode;\r\n        }else if(state === 'highContrast'){\r\n            value = appearanceResponse.highContrast;\r\n        }else if(state === 'textSize'){\r\n            value = appearanceResponse.textSize;\r\n        }else if(state === 'avatarDefaultColour'){\r\n            value = appearanceResponse.avatarDefaultColour;\r\n        }else{\r\n            //do not display any values - state is incorrect\r\n            return null\r\n        }\r\n        console.log(state,value)\r\n\r\n        //Return the value of this state\r\n        return value;\r\n    }\r\n\r\n    //Method overloading - username parameter method\r\n    async getAppearanceState2(state,username){\r\n        var appearanceID, value;\r\n\r\n        await this.initialiseSettingMappings(username).then(response => appearanceID = response.apperance);\r\n\r\n        await console.log(appearanceID)\r\n\r\n        //Store the response from the marketing data of this user temporarily\r\n        const appearanceResponse = await this.getAppearanceData(appearanceID)\r\n\r\n        await console.log(appearanceResponse)\r\n\r\n        //Check which state to change\r\n        if(state === 'primaryHexColour'){\r\n            value = appearanceResponse.primaryHexColour;\r\n        }else if(state === 'secondaryHexColour'){\r\n            value = appearanceResponse.secondaryHexColour;\r\n        }else if(state === 'darkMode'){\r\n            value = appearanceResponse.darkMode;\r\n        }else if(state === 'highContrast'){\r\n            value = appearanceResponse.highContrast;\r\n        }else if(state === 'textSize'){\r\n            value = appearanceResponse.textSize;\r\n        }else if(state === 'avatarDefaultColour'){\r\n            value = appearanceResponse.avatarDefaultColour;\r\n        }else{\r\n            //do not display any values - state is incorrect\r\n            return null\r\n        }\r\n\r\n        //Return the value of this state\r\n        return value;\r\n    }\r\n\r\n    //Method to get user appearance data\r\n    async getAppearanceData(id){\r\n        return axios.get(`${SpringHostURL}/api/users/settings/appearance/${id}`,{\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to set marketing data\r\n    async setAppearanceState(state,value){\r\n        var appearanceID;\r\n\r\n        //Get Marketing mapping id\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => appearanceID = response.apperance);\r\n\r\n        //Store the response from the marketing data of this user temporarily\r\n        const appearanceResponse = await this.getAppearanceData(appearanceID)\r\n\r\n        //Check which state to change\r\n        if(state === 'primaryHexColour'){\r\n            appearanceResponse.primaryHexColour = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else if(state === 'secondaryHexColour'){\r\n            appearanceResponse.secondaryHexColour = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else if(state === 'darkMode'){\r\n            appearanceResponse.darkMode = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else if(state === 'highContrast'){\r\n            appearanceResponse.highContrast = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else if(state === 'textSize'){\r\n            appearanceResponse.textSize = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else if(state === 'avatarDefaultColour'){\r\n            appearanceResponse.avatarDefaultColour = value;\r\n            sessionStorage.setItem(state,value)\r\n        }else{\r\n            //do not change any values - state is incorrect\r\n        }\r\n\r\n        //Update the marketing record accordingly\r\n        await this.updateAppearanceRecord(appearanceID,appearanceResponse);\r\n    }\r\n    \r\n    //Method to get user setting mappings\r\n    async initialiseSettingMappings(username){\r\n        return axios.get(`${SpringHostURL}/api/users/username/${username}`,{\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    //Method to modify marketing response data\r\n    async updateAppearanceRecord(id,appearanceResponse){\r\n        return axios.put(`${SpringHostURL}/api/users/settings/appearance/${id}`,appearanceResponse,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    async storeAppearance(){\r\n        var appearanceID;\r\n\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => appearanceID = response.apperance);\r\n\r\n        const appearanceResponse = await this.getAppearanceData(appearanceID)\r\n\r\n        //Check if user did not enter a value for this attribute\r\n        if(appearanceResponse.primaryHexColour == null){\r\n            sessionStorage.setItem(\"primaryHexColour\", defaultPrimary)\r\n        }else{\r\n            sessionStorage.setItem(\"primaryHexColour\", appearanceResponse.primaryHexColour)\r\n        }\r\n\r\n        //Check if user did not enter a value for this attribute\r\n        if(appearanceResponse.secondaryHexColour == null){\r\n            sessionStorage.setItem(\"secondaryHexColour\", defaultSecondary)\r\n        }else{\r\n            sessionStorage.setItem(\"secondaryHexColour\", appearanceResponse.secondaryHexColour)\r\n        }\r\n      \r\n        //Check if user did not enter a value for this attribute\r\n        if(appearanceResponse.darkMode == null){\r\n            sessionStorage.setItem(\"darkMode\", false)\r\n        }else{\r\n            sessionStorage.setItem(\"darkMode\", appearanceResponse.darkMode)\r\n        }\r\n\r\n        //Check if user did not enter a value for this attribute\r\n        if(appearanceResponse.highContrast == null){\r\n            sessionStorage.setItem(\"highContrast\", false)\r\n        }else{\r\n            sessionStorage.setItem(\"highContrast\", appearanceResponse.highContrast)\r\n        }\r\n\r\n        //Check if user did not enter a value for this attribute\r\n        if(appearanceResponse.textSize == null){\r\n            sessionStorage.setItem(\"textSize\", '12')\r\n        }else{\r\n            sessionStorage.setItem(\"textSize\", appearanceResponse.textSize)\r\n        }\r\n      }\r\n}\r\n\r\nexport default new ThemeSettings()","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\nimport FirstTimeSetup from '../components/FirstTimeSetup';\r\nimport DashboardView from '../components/dashboard/DashboardView';\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Create Landing class using Component instace\r\nclass Dashboard extends React.Component {\r\n\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n              primary: {\r\n                main: this.getPrimaryColour()\r\n              },\r\n              secondary: {\r\n                main: this.getSecondaryColour()\r\n              }\r\n            }\r\n          })}>\r\n          <Navbar title='Dashboard' searchField='true' />\r\n          <FirstTimeSetup/>\r\n          <DashboardView/>\r\n          </MuiThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Dashboard;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass SleepGet {\r\n\r\n    //Method to get all sleep activities by the current user\r\n    async getUserActivity(){\r\n        //Get Activity Data\r\n        const activityDataRes = await this.getActivityData()\r\n\r\n        //Filter just results by this user\r\n        const userActivityRes = activityDataRes.filter(function(item){\r\n            return item.userID == sessionStorage.getItem('UserID');         \r\n        });\r\n\r\n        return userActivityRes\r\n    }\r\n\r\n    //Main Method to get User Data, merge filtered data and return this sleep data only by the user and only activities that are sleep measurements\r\n    async getUserData(){\r\n        //Get Activity User Response\r\n        const activityDataFilter = await this.getUserActivity()\r\n\r\n        return activityDataFilter\r\n    }\r\n\r\n    //Method to get activity data\r\n    async getActivityData(){\r\n        return axios.get(`${SpringHostURL}/api/activities`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new SleepGet()","import React, {useState, useEffect} from \"react\";\r\n\r\n//Import DataGrid (table) and Grid toolbar (export features)\r\nimport { DataGrid, GridToolbar } from '@material-ui/data-grid';\r\n\r\n//Import Box for spacing\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Import WeightGet service\r\nimport ActivitiesGet from '../../../services/activities/activitiesGet'\r\n\r\nexport default function RowsGrid() {\r\n\r\n    //State for table rows to be appended on\r\n    const [tableRows,setTableRow] = useState([]);\r\n  \r\n    //Define table columns for DataGrid\r\n    const tableColumns = [\r\n        { field: \"activityStart\", headerName: \"Date/Time\", description: 'The date/time of the weight measurement.', type: 'dateTime', flex: 0.9},\r\n        { field: \"activityType\", headerName: \"Measurement\", description: 'The activity type entered into Fitify.', flex: 0.5},\r\n        { field: \"moodRating\", headerName: \"Mood Rating\", description: 'Mood rating is out of 5, with 5 being the most motivated.', type: 'number', flex: 0.5},\r\n        ];\r\n\r\n    //Load table data before render\r\n    useEffect(() => {\r\n        ActivitiesGet.getUserData().then(dataResponse => {\r\n            //Change ActivityID to id (required ID field for DataGrid)\r\n            var DataGridID = dataResponse.map(item => { return { ...item, id: item.activityID }; });\r\n\r\n            console.log(DataGridID)\r\n\r\n            //Update Row fields\r\n            setTableRow(DataGridID);\r\n          })\r\n        }, []);\r\n\r\n    return (\r\n        <div style={{ height: '90vh', width: '98%' }}>\r\n        <DataGrid\r\n            columns={tableColumns}\r\n            rows={tableRows}\r\n            components={{\r\n                Toolbar: GridToolbar,\r\n              }}\r\n            pageSize={14}\r\n            rowsPerPageOptions={[14, 30, 100, 365]}\r\n        />\r\n        </div>\r\n    );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Activities Table\r\nimport ActivitiesTable from './visualisation/ActivitiesTable';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    extendedIcon: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nexport default function ActivitiesView(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <ActivitiesTable />\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\nimport ActivitiesView from '../components/activities/ActivitiesView'\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Create Activities class using Component instace\r\nclass Activities extends React.Component {\r\n\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n            primary: {\r\n              main: this.getPrimaryColour()\r\n            },\r\n            secondary: {\r\n              main: this.getSecondaryColour()\r\n            }\r\n          }\r\n        })}>\r\n        <Navbar title='Activities' searchField='true' />\r\n        <ActivitiesView />\r\n        </MuiThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Activities;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass PostSet {\r\n\r\n    //Method to initialise creating a record\r\n    async createPost(\r\n        description\r\n    ){\r\n        //Create the post record\r\n        const activityResponse = await this.createPostData(sessionStorage.getItem('UserID'), description, false, false, '')\r\n\r\n        return activityResponse\r\n    }\r\n\r\n    //Method to create post\r\n    async createPostData(\r\n        userID,\r\n        post,\r\n        publicVisibility,\r\n        friendsVisibility,\r\n        tags\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/posts`,{\r\n            //Json Body content\r\n            \"userID\": userID,\r\n            \"post\": post,\r\n            \"publicVisibility\": publicVisibility,\r\n            \"friendsVisibility\": friendsVisibility,\r\n            \"tags\": tags,\r\n            \"userLiked\": 0\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new PostSet()","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//Post store service\r\nimport PostSet from '../../../services/post/postSet';\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: '2px 4px',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '80vw',\r\n    height: 100\r\n  },\r\n  input: {\r\n    marginLeft: theme.spacing(1),\r\n    flex: 1,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  divider: {\r\n    height: 28,\r\n    margin: 4,\r\n  },\r\n}));\r\n\r\nexport default function CustomizedInputBase() {\r\n\r\n  const classes = useStyles();\r\n\r\n  let history = useHistory();\r\n\r\n  const [post, setPost] = React.useState({\r\n    description: '',\r\n    invalidPost: false\r\n  });\r\n\r\n  const handleFormChange = (event) => {\r\n    setPost({ ...post, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  //Method to create Activity and Weight using the WeightService\r\n  const submitInput = () => {\r\n\r\n    //Validation - (BASE CASE): Check if the post is not blank before continuing\r\n    if((post.description === null || post.description === '')){\r\n\r\n      var invalidPost = false\r\n\r\n      //If the post has not been input\r\n      if(post.description === null || post.description === ''){\r\n        invalidPost = true\r\n      }else{\r\n        invalidPost = false\r\n      }\r\n\r\n      //Set error state\r\n      setPost({ ...post,\r\n        invalidPost: invalidPost,\r\n       });\r\n\r\n    }else{\r\n\r\n      //Reset error state to false\r\n      setPost({ ...post,\r\n        invalidPost: false,\r\n       });\r\n\r\n       console.log('desc',post.description)\r\n\r\n      PostSet.createPost(post.description\r\n      ).then(() => {\r\n        //Successful Creation\r\n        \r\n        //Clear status text\r\n        setPost({ ...post,\r\n          description: null,\r\n         });\r\n\r\n        //Reload component by routing to a different component and back again\r\n        history.push('/app/dashboard');\r\n        history.push('/app/social');\r\n      }).catch((error) => {\r\n        //TODO: Error handling dialog,message,etc.\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TextField\r\n        className={classes.input}\r\n        placeholder=\"Share what's new...\"\r\n        inputProps={{ 'aria-label': 'text you wish to post' }}\r\n        value={post.description || null}\r\n        name=\"description\"\r\n        onChange={handleFormChange}\r\n        error={post.invalidPost}\r\n        helperText={post.invalidPost && \"Post should not be blank\"}\r\n      />\r\n      <Divider className={classes.divider} orientation=\"vertical\" />\r\n      <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"post\" onClick={submitInput}>\r\n        <AddIcon />\r\n      </IconButton>\r\n    </Paper>\r\n  );\r\n}","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass PostGet {\r\n\r\n    //Main Method to get all post data\r\n    async getPosts(){\r\n        const postData = await this.getPostData()\r\n\r\n        return postData\r\n    }\r\n\r\n    //Method to get all weight measurements by the current user\r\n    async getPostsUserDetails(){\r\n        //Get postData from the Posts table\r\n        const postData = await this.getPostData()\r\n\r\n        //Get data from the users table to be combined\r\n        const userData = await this.getUserData()\r\n\r\n        //Filter out just the the userIDs that have posted (get list of ids)\r\n        var userIDList = postData.map(a => a.userID);\r\n\r\n        //Filter all user data of these ids\r\n        const filteredPosts = userData.filter(item => userIDList.includes(item.id));\r\n\r\n        //Merge the post object with the user details using the arrays.map function\r\n        const mergedResponses = postData.map(postMap => ({...postMap, ...filteredPosts.find(usrMap => usrMap.id === postMap.userID)}))\r\n\r\n        //Map the id field as nothing so that these can be removed (table will sort out id to the postID)\r\n        const responseWithoutID = mergedResponses.map(({ id, ...item }) => item);\r\n\r\n        //Finally return the result\r\n        return responseWithoutID\r\n    }\r\n\r\n    //Method to get post data\r\n    async getPostData(){\r\n        return axios.get(`${SpringHostURL}/api/posts`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to get user data\r\n    async getUserData(){\r\n        return axios.get(`${SpringHostURL}/api/users`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new PostGet()","import React, {useState, useEffect} from \"react\";\r\n\r\n//Import DataGrid (table)\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\n//Import WeightGet service\r\nimport ActivitiesGet from '../../../services/post/postGet'\r\n\r\nexport default function PostTable() {\r\n\r\n    //State for table rows to be appended on\r\n    const [tableRows,setTableRow] = useState([]);\r\n  \r\n    //Define table columns for DataGrid\r\n    const tableColumns = [\r\n        { field: \"username\", headerName: \"Username\", description: 'Username', sortable: false, flex: 0.3},\r\n        { field: \"firstName\", headerName: \"First Name\", description: 'First Name', sortable: false, flex: 0.3},\r\n        { field: \"lastName\", headerName: \"Last Name\", description: 'Last Name', sortable: false, flex: 0.3},\r\n        { field: \"post\", headerName: \"Post\", description: 'Post', sortable: false, flex: 1},\r\n        ];\r\n\r\n    //Load table data before render\r\n    useEffect(() => {\r\n        ActivitiesGet.getPostsUserDetails().then(dataResponse => {\r\n            //Change ActivityID to id (required ID field for DataGrid)\r\n            var DataGridID = dataResponse.map(item => { return { ...item, id: item.postID }; });\r\n\r\n            console.log(dataResponse)\r\n\r\n            //Update Row fields\r\n            setTableRow(DataGridID);\r\n          })\r\n        }, []);\r\n\r\n    return (\r\n        <div style={{ height: '90vh', width: '90%', padding: '45px' }}>\r\n        <DataGrid\r\n            columns={tableColumns}\r\n            rows={tableRows}\r\n            pageSize={6}\r\n            rowsPerPageOptions={[6, 12, 30, 100, 1000]}\r\n        />\r\n        </div>\r\n    );\r\n}","//Import React library\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Material-Ui grid\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\n//Import Activities Table\r\nimport PostStatusCreation from './card/createPost';\r\nimport PostTable from './visualisation/PostsTable';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n\r\nexport default function SocialView(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <Grid container justify = \"center\">\r\n        <PostStatusCreation />\r\n        <PostTable/>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\nimport SocialView from '../components/social/SocialView'\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Create Activities class using Component instace\r\nclass Activities extends React.Component {\r\n\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n            primary: {\r\n              main: this.getPrimaryColour()\r\n            },\r\n            secondary: {\r\n              main: this.getSecondaryColour()\r\n            }\r\n          }\r\n        })}>\r\n        <Navbar title='Social' searchField='true' />\r\n        <SocialView />\r\n        </MuiThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Activities;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass WeightGet {\r\n\r\n    //Method to get all weight activities by the current user\r\n    async getUserActivity(){\r\n        //Get Activity Data\r\n        const activityDataRes = await this.getActivityData()\r\n\r\n        //Filter just results by this user\r\n        const userActivityRes = activityDataRes.filter(function(item){\r\n            return item.userID == sessionStorage.getItem('UserID');         \r\n        });\r\n\r\n        //Finally, filter results by weight measurements\r\n        const userActivityWeight = userActivityRes.filter(function(item){\r\n            return item.activityType == 'weight'        \r\n        });\r\n\r\n        return userActivityWeight\r\n    }\r\n\r\n    //Method to get all weight measurements by the current user\r\n    async getUserWeight(userActivityWeight){\r\n        //Get filtered data from the user that only contains weight measurements\r\n        const weightDataRes = await this.getWeightData()\r\n\r\n        //Filter out just the activityID's from WeightData\r\n        var userActivities = userActivityWeight.map(a => a.activityID);\r\n\r\n        //Filter just results from the filtered UserID and WeightMeasurement from previous filter\r\n        const filteredWeights = weightDataRes.filter(item => userActivities.includes(item.activityID));\r\n\r\n        //Merge the userActivity object with the userWeight object using the arrays.map function\r\n        const mergedResponses = userActivityWeight.map(activityMapping => ({...activityMapping, ...filteredWeights.find(weightMapping => weightMapping.activityID === activityMapping.activityID)}))\r\n\r\n        return mergedResponses\r\n    }\r\n\r\n    //Main Method to get User Data, merge filtered data and return this weight data only by the user and only activities that are weights\r\n    async getUserData(){\r\n        //Get Activity User Response\r\n        const activityDataFilter = await this.getUserActivity()\r\n\r\n        //Get those activity Weight data now\r\n        const weightDataFilterMerge = await this.getUserWeight(activityDataFilter)\r\n\r\n        return weightDataFilterMerge\r\n    }\r\n\r\n    //Method to get activity data\r\n    async getActivityData(){\r\n        return axios.get(`${SpringHostURL}/api/activities`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to get activity weight data\r\n    async getWeightData(){\r\n        return axios.get(`${SpringHostURL}/api/activities/weight`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new WeightGet()","import React, { useState, useEffect } from 'react';\r\n\r\n//Import Recharts for line graph rendering\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n\r\n//Import WeightGet service\r\nimport WeightGet from '../../../services/activities/weightGet'\r\n\r\n//Grey Tooltip text (fixes white Theme css)\r\nimport './tooltip.css'\r\n\r\nexport default function RowsGrid() {\r\n\r\n\t\t//State for chart data to be appended on\r\n\t\tconst [chartData,setChartData] = useState([]);\r\n\r\n\t\t//Load chart data before render\r\n\t\tuseEffect(() => {\r\n\t\t\tWeightGet.getUserData().then(dataResponse => {\r\n\t\t\t\t//Update Chart data\r\n\t\t\t\tsetChartData(dataResponse);\r\n\t\t\t})\r\n\t\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t\t<ResponsiveContainer width=\"99%\" height={400}>\r\n                <AreaChart width={730} height={250} data={chartData}\r\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }} >\r\n                    <defs>\r\n                        <linearGradient id=\"weight\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey=\"activityStart\"/>\r\n                    <YAxis />\r\n                    <CartesianGrid strokeDasharray=\"7 7\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Area type=\"monotone\" dataKey=\"weight\" name=\"Weight (in kg)\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#weight)\" unit=\" kg\"/>\r\n                </AreaChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t);\r\n\t\r\n}","import React, {useState, useEffect} from \"react\";\r\n\r\n//Import DataGrid (table) and Grid toolbar (export features)\r\nimport { DataGrid, GridToolbar } from '@material-ui/data-grid';\r\n\r\n//Import Box for spacing\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Import WeightGet service\r\nimport WeightGet from '../../../services/activities/weightGet'\r\n\r\nexport default function RowsGrid() {\r\n\r\n    //State for table rows to be appended on\r\n    const [tableRows,setTableRow] = useState([]);\r\n  \r\n    //Define table columns for DataGrid\r\n    const tableColumns = [\r\n        { field: \"activityStart\", headerName: \"Date/Time\", description: 'The date/time of the weight measurement.', type: 'dateTime', flex: 0.9},\r\n        { field: \"moodRating\", headerName: \"Mood Rating\", description: 'Mood rating is out of 5, with 5 being the most motivated.', type: 'number', flex: 0.5},\r\n        { field: \"weight\", headerName: \"Weight (kg)\", description: 'Weight is measured in kilograms.', type: 'number', flex: 0.5},\r\n        { field: \"description\", headerName: \"Description\", description: 'Optional description entered by the user.', sortable: false, flex: 1},\r\n        ];\r\n\r\n    //Load table data before render\r\n    useEffect(() => {\r\n        WeightGet.getUserData().then(dataResponse => {\r\n            //Change ActivityID to id (required ID field for DataGrid)\r\n            var DataGridID = dataResponse.map(item => { return { ...item, id: item.activityID }; });\r\n\r\n            console.log(DataGridID)\r\n\r\n            //Update Row fields\r\n            setTableRow(DataGridID);\r\n          })\r\n        }, []);\r\n\r\n    return (\r\n        <div style={{ height: '50vh', width: '98%' }}>\r\n        <DataGrid\r\n            columns={tableColumns}\r\n            rows={tableRows}\r\n            components={{\r\n                Toolbar: GridToolbar,\r\n              }}\r\n            pageSize={7}\r\n            rowsPerPageOptions={[7, 14, 30, 365]}\r\n        />\r\n        </div>\r\n    );\r\n}","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass WeightStore {\r\n\r\n    //Method to initialise creating a record\r\n    async createRecord(\r\n        startDateTime,\r\n        endDateTime,\r\n        activityType,\r\n        moodRating,\r\n        caloriesBurnt,\r\n        weight,\r\n        description\r\n    ){\r\n        //Create the activity record\r\n        const activityResponse = await this.createActivity(startDateTime, endDateTime, activityType, moodRating, caloriesBurnt, sessionStorage.getItem('UserID'))\r\n\r\n        //Create the parent weight activity record\r\n        const weightResponse = await this.createWeight(activityResponse, weight, description)\r\n\r\n        return weightResponse\r\n    }\r\n    \r\n\r\n    //Method to create Activity data\r\n    async createActivity(\r\n        startDateTime,\r\n        endDateTime,\r\n        activityType,\r\n        moodRating,\r\n        caloriesBurnt,\r\n        userID\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities`,{\r\n            //Json Body content\r\n            \"userID\": userID,\r\n            \"activityStart\": startDateTime,\r\n            \"activityEnd\": endDateTime,\r\n            \"activityType\": activityType,\r\n            \"moodRating\": moodRating,\r\n            \"caloriesBurnt\": caloriesBurnt\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to create Weight activity\r\n    async createWeight(\r\n        activityID,\r\n        weight,\r\n        description\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities/weight`,{\r\n            //Json Body content\r\n            \"activityID\": activityID,\r\n            \"weight\": weight,\r\n            \"description\": description\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new WeightStore()","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n//Import Material-ui Floating Button\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n//Material-Ui Pickers\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDateTimePicker,\r\n} from '@material-ui/pickers';\r\n\r\n//Material-Ui Rating\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Material-Ui Rating Icons\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport SentimentDissatisfiedIcon from '@material-ui/icons/SentimentDissatisfied';\r\nimport SentimentSatisfiedIcon from '@material-ui/icons/SentimentSatisfied';\r\nimport SentimentSatisfiedAltIcon from '@material-ui/icons/SentimentSatisfiedAltOutlined';\r\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\n//Material-Ui TextField\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//WeightService CRUD\r\nimport WeightStoreService from '../../../services/activities/weightStore'\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n  extendedIcon: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(10),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst likertIcons = {\r\n  1: {\r\n    icon: <SentimentVeryDissatisfiedIcon />,\r\n    label: 'Very Dissatisfied',\r\n  },\r\n  2: {\r\n    icon: <SentimentDissatisfiedIcon />,\r\n    label: 'Dissatisfied',\r\n  },\r\n  3: {\r\n    icon: <SentimentSatisfiedIcon />,\r\n    label: 'Neutral',\r\n  },\r\n  4: {\r\n    icon: <SentimentSatisfiedAltIcon />,\r\n    label: 'Satisfied',\r\n  },\r\n  5: {\r\n    icon: <SentimentVerySatisfiedIcon />,\r\n    label: 'Very Satisfied',\r\n  },\r\n};\r\n\r\nfunction IconContainer(props) {\r\n  const { value, ...other } = props;\r\n  return <span {...other}>{likertIcons[value].icon}</span>;\r\n}\r\n\r\nIconContainer.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function WeightInput() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    //Reset all states to default\r\n    setActivity({\r\n      startDateTime: '',\r\n      endDateTime: '',\r\n      activityType: 'weight',\r\n      moodRating: 0,\r\n      caloriesBurnt: 0,\r\n      weight: '',\r\n      description: '',\r\n      invalidDate: false,\r\n      invalidWeight: false}\r\n    );\r\n  };\r\n\r\n  // ------------------------- Activity States and handlers ------------------------- //\r\n\r\n  const [activity, setActivity] = React.useState({\r\n      startDateTime: '',\r\n      endDateTime: '',\r\n      activityType: 'weight',\r\n      moodRating: 0,\r\n      caloriesBurnt: 0,\r\n      weight: null,\r\n      description: null,\r\n      invalidDate: false,\r\n      invalidWeight: false,\r\n  });\r\n\r\n  const handleFormChange = (event) => {\r\n    console.log('event',event)\r\n    setActivity({ ...activity, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  //Custom method to handle Date object to be seen as a React SyntheticEvent by using the target object layout\r\n  const handleDateChange = (dateArg) => {\r\n    var dateEventObj = {\"target\": {\"name\": \"startDateTime\", \"value\": dateArg} }\r\n    handleFormChange(dateEventObj);\r\n  };\r\n\r\n  //Method to create Activity and Weight using the WeightService\r\n  const submitInput = () => {\r\n\r\n    //Validation - (BASE CASE): Check if the weight and date is present\r\n    if((activity.weight === null || activity.weight === '' || parseInt(activity.weight) <= 0) || (activity.startDateTime === null || activity.startDateTime === '')){\r\n\r\n      var invalidWeight = false\r\n      var invalidDate = false\r\n\r\n      //If the weight has not been input\r\n      if(activity.weight === null || activity.weight === '' || parseInt(activity.weight) <= 0){\r\n        invalidWeight = true\r\n      }else{\r\n        invalidWeight = false\r\n      }\r\n\r\n      //If the date has not been input, Display Date Error\r\n      if(activity.startDateTime === null || activity.startDateTime === ''){\r\n        invalidDate = true\r\n      }else{\r\n        invalidDate = false\r\n      }\r\n\r\n      //Set React States\r\n      setActivity({ ...activity,\r\n        invalidWeight: invalidWeight,\r\n        invalidDate: invalidDate\r\n       });\r\n\r\n    }else{\r\n\r\n      //Create records in Activity and Weight\r\n      WeightStoreService.createRecord(activity.startDateTime,\r\n        activity.endDateTime,\r\n        activity.activityType,\r\n        activity.moodRating,\r\n        activity.caloriesBurnt,\r\n        activity.weight,\r\n        activity.description\r\n      ).then(() => {\r\n        //Successful Creation\r\n        handleClose()\r\n        //Reload component by routing to a different component and back again\r\n        history.push('/app/dashboard');\r\n        history.push('/app/weight');\r\n      }).catch((error) => {\r\n        //TODO: Error handling dialog,message,etc.\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Fab color=\"primary\" aria-label=\"add\" className={classes.extendedIcon} onClick={handleClickOpen}>\r\n        <AddIcon />\r\n      </Fab>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Weight Input\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={submitInput}>\r\n              Add Weight\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDateTimePicker\r\n                fullWidth\r\n                InputLabelProps={{\r\n                    shrink: true\r\n                }}\r\n                margin=\"normal\"\r\n                id=\"startDateTime\"\r\n                label=\"Date/Time of Weight Measurement\"\r\n                format=\"dd/MM/yyyy\"\r\n                value={activity.startDateTime || null}\r\n                onChange={handleDateChange}\r\n                //required\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n                error={activity.invalidDate}\r\n                helperText={activity.invalidDate && \"Date or Date and Time is required\"}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n          </ListItem>\r\n          <ListItem>\r\n              <TextField\r\n              label=\"Weight\"\r\n              id=\"weight\"\r\n              type=\"number\"\r\n              name=\"weight\"\r\n              value={activity.weight || null}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n              }}\r\n              onChange={handleFormChange}\r\n              error={activity.invalidWeight}\r\n              helperText={activity.invalidWeight && \"Weight is required\"}\r\n              fullWidth\r\n            />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n          <TextField\r\n              label=\"Description (Optional)\"\r\n              name=\"description\"\r\n              id=\"description\"\r\n              value={activity.description || null}\r\n              onChange={handleFormChange}\r\n              fullWidth\r\n            />\r\n          </ListItem>\r\n          <ListItem>\r\n            <Typography component=\"legend\">How did you feel about this measurement?</Typography>\r\n            <Rating\r\n            name=\"moodRating\"\r\n            size=\"large\"\r\n            value={activity.moodRating || null}\r\n            defaultValue={2}\r\n            getLabelText={(value) => likertIcons[value].label}\r\n            IconContainerComponent={IconContainer}\r\n            onChange={handleFormChange}\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Chart\r\nimport WeightChart from './visualisation/WeightChart';\r\n\r\n//Import Table\r\nimport WeightTable from './visualisation/WeightTable';\r\n\r\n//Import Weight Input Button\r\nimport WeightInput from './actionButton/weightInput'\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    extendedIcon: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nexport default function WeightView(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <WeightChart />\r\n      <WeightTable />\r\n      <WeightInput />\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Import Weight view\r\nimport WeightView from '../components/weight/WeightView'\r\n\r\n//Create Landing class using Component instace\r\nclass Weight extends React.Component {\r\n  \r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n          primary: {\r\n            main: this.getPrimaryColour()\r\n          },\r\n          secondary: {\r\n            main: this.getSecondaryColour()\r\n          }\r\n        }\r\n      })}>\r\n      <Navbar title='Weight' searchField='true' />\r\n      <WeightView />\r\n      </MuiThemeProvider>\r\n    </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Weight;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass SleepGet {\r\n\r\n    //Method to get all sleep activities by the current user\r\n    async getUserActivity(){\r\n        //Get Activity Data\r\n        const activityDataRes = await this.getActivityData()\r\n\r\n        //Filter just results by this user\r\n        const userActivityRes = activityDataRes.filter(function(item){\r\n            return item.userID == sessionStorage.getItem('UserID');         \r\n        });\r\n\r\n        //Finally, filter results by sleep measurements\r\n        const userActivitySleep = userActivityRes.filter(function(item){\r\n            return item.activityType == 'sleep'        \r\n        });\r\n\r\n        return userActivitySleep\r\n    }\r\n\r\n    //Method to get all sleep measurements by the current user\r\n    async getUserSleep(userActivitySleep){\r\n        //Get filtered data from the user that only contains sleep measurements\r\n        const sleepDataRes = await this.getSleepData()\r\n\r\n        //Filter out just the activityID's from SleepData\r\n        var userActivities = userActivitySleep.map(a => a.activityID);\r\n\r\n        //Filter just results from the filtered UserID and SleepData from previous filter\r\n        const filteredSleeps = sleepDataRes.filter(item => userActivities.includes(item.activityID));\r\n\r\n        //Merge the userActivity object with the userSleep object using the arrays.map function\r\n        const mergedResponses = userActivitySleep.map(activityMapping => ({...activityMapping, ...filteredSleeps.find(sleepMapping => sleepMapping.activityID === activityMapping.activityID)}))\r\n\r\n        return mergedResponses\r\n    }\r\n\r\n    //Main Method to get User Data, merge filtered data and return this sleep data only by the user and only activities that are sleep measurements\r\n    async getUserData(){\r\n        //Get Activity User Response\r\n        const activityDataFilter = await this.getUserActivity()\r\n\r\n        //Get those activity Sleep data now\r\n        const sleepDataFilterMerge = await this.getUserSleep(activityDataFilter)\r\n\r\n        return sleepDataFilterMerge\r\n    }\r\n\r\n    //Method to get activity data\r\n    async getActivityData(){\r\n        return axios.get(`${SpringHostURL}/api/activities`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to get activity sleep data\r\n    async getSleepData(){\r\n        return axios.get(`${SpringHostURL}/api/activities/sleep`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new SleepGet()","import React, { useState, useEffect } from 'react';\r\n\r\n//Import Recharts for line graph rendering\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n\r\n//Import SleepGet service\r\nimport SleepGet from '../../../services/activities/sleepGet'\r\n\r\n//Grey Tooltip text (fixes white Theme css)\r\nimport './tooltip.css'\r\n\r\nexport default function SleepChart() {\r\n\r\n\t\t//State for chart data to be appended on\r\n\t\tconst [chartData,setChartData] = useState([]);\r\n\r\n\t\t//Load chart data before render\r\n\t\tuseEffect(() => {\r\n\t\t\tSleepGet.getUserData().then(dataResponse => {\r\n\t\t\t\t//Update Chart data\r\n\t\t\t\tsetChartData(dataResponse);\r\n\t\t\t})\r\n\t\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t\t<ResponsiveContainer width=\"99%\" height={400}>\r\n                <AreaChart width={730} height={250} data={chartData}\r\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }} >\r\n                    <defs>\r\n                        <linearGradient id=\"sleepingHrs\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"#ffa500\" stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor=\"#ffa500\" stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey=\"sleepDate\" name=\"# Apples\"/>\r\n                    <YAxis />\r\n                    <CartesianGrid strokeDasharray=\"7 7\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Area type=\"monotone\" dataKey=\"sleepingHrs\" name=\"Sleeping Hours\" stroke=\"#ffa500\" fillOpacity={1} fill=\"url(#sleepingHrs)\" unit=\" Hours\"/>\r\n                </AreaChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t);\r\n\t\r\n}","import React, {useState, useEffect} from \"react\";\r\n\r\n//Import DataGrid (table) and Grid toolbar (export features)\r\nimport { DataGrid, GridToolbar } from '@material-ui/data-grid';\r\n\r\n//Import SleepGet service\r\nimport SleepGet from '../../../services/activities/sleepGet'\r\n\r\nexport default function SleepTable() {\r\n\r\n    //State for table rows to be appended on\r\n    const [tableRows,setTableRow] = useState([]);\r\n  \r\n    //Define table columns for DataGrid\r\n    const tableColumns = [\r\n        { field: \"sleepDate\", headerName: \"Sleep Date\", description: 'The date of the sleep measurement.', type: 'date', flex: 0.9},\r\n        { field: \"sleepTime\", headerName: \"Sleep Time\", description: 'The time of going to sleep', flex: 0.9},\r\n        { field: \"awakeTime\", headerName: \"Awake Time\", description: 'The time of being awake',  flex: 0.9},\r\n        { field: \"sleepingHrs\", headerName: \"Sleeping Hours\", description: 'Hours spent sleeping (2dp)', type: 'time', flex: 0.9},\r\n        { field: \"moodRating\", headerName: \"Mood Rating\", description: 'Mood rating is out of 5, with 5 being the most motivated.', type: 'number', flex: 0.5},\r\n        ];\r\n\r\n    //Load table data before render\r\n    useEffect(() => {\r\n        SleepGet.getUserData().then(dataResponse => {\r\n            //Change ActivityID to id (required ID field for DataGrid)\r\n            var DataGridID = dataResponse.map(item => { return { ...item, id: item.activityID }; });\r\n\r\n            console.log(DataGridID)\r\n\r\n            //Update Row fields\r\n            setTableRow(DataGridID);\r\n          })\r\n        }, []);\r\n\r\n    return (\r\n        <div style={{ height: '50vh', width: '98%' }}>\r\n        <DataGrid\r\n            columns={tableColumns}\r\n            rows={tableRows}\r\n            components={{\r\n                Toolbar: GridToolbar,\r\n              }}\r\n            pageSize={7}\r\n            rowsPerPageOptions={[7, 14, 30, 365]}\r\n        />\r\n        </div>\r\n    );\r\n}","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass SleepStore {\r\n\r\n    //Method to initialise creating a record\r\n    async createRecord(\r\n        startDateTime,\r\n        endDateTime,\r\n        moodRating,\r\n        caloriesBurnt,\r\n        sleepDate,\r\n        sleepTime,\r\n        awakeTime,\r\n        sleepingHrs,\r\n    ){\r\n        //Create the activity record\r\n        const activityResponse = await this.createActivity(startDateTime, endDateTime, moodRating, caloriesBurnt, sessionStorage.getItem('UserID'))\r\n\r\n        //Create the parent sleep activity record\r\n        const sleepResponse = await this.createSleep(activityResponse, sleepDate, sleepTime, awakeTime, sleepingHrs)\r\n\r\n        return sleepResponse\r\n    }\r\n    \r\n\r\n    //Method to create Activity data\r\n    async createActivity(\r\n        startDateTime,\r\n        endDateTime,\r\n        moodRating,\r\n        caloriesBurnt,\r\n        userID\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities`,{\r\n            //Json Body content\r\n            \"userID\": userID,\r\n            \"activityStart\": startDateTime,\r\n            \"activityEnd\": endDateTime,\r\n            \"activityType\": \"sleep\",\r\n            \"moodRating\": moodRating,\r\n            \"caloriesBurnt\": caloriesBurnt\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to create Weight activity\r\n    async createSleep(\r\n        activityID,\r\n        sleepDate,\r\n        sleepTime,\r\n        awakeTime,\r\n        sleepingHrs\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities/sleep`,{\r\n            //Json Body content\r\n            \"activityID\": activityID,\r\n            \"sleepDate\": sleepDate,\r\n            \"sleepTime\": sleepTime,\r\n            \"awakeTime\": awakeTime,\r\n            \"sleepingHrs\": sleepingHrs\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new SleepStore()","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n//Import Material-ui Floating Button\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n//Material-Ui Pickers\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n  KeyboardDateTimePicker,\r\n  KeyboardTimePicker\r\n} from '@material-ui/pickers';\r\n\r\n//Material-Ui Rating\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Material-Ui Rating Icons\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport SentimentDissatisfiedIcon from '@material-ui/icons/SentimentDissatisfied';\r\nimport SentimentSatisfiedIcon from '@material-ui/icons/SentimentSatisfied';\r\nimport SentimentSatisfiedAltIcon from '@material-ui/icons/SentimentSatisfiedAltOutlined';\r\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\n//Material-Ui TextField\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n//SleepService CRUD\r\nimport SleepStoreService from '../../../services/activities/sleepStore'\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n  extendedIcon: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(10),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst likertIcons = {\r\n  1: {\r\n    icon: <SentimentVeryDissatisfiedIcon />,\r\n    label: 'Very Dissatisfied',\r\n  },\r\n  2: {\r\n    icon: <SentimentDissatisfiedIcon />,\r\n    label: 'Dissatisfied',\r\n  },\r\n  3: {\r\n    icon: <SentimentSatisfiedIcon />,\r\n    label: 'Neutral',\r\n  },\r\n  4: {\r\n    icon: <SentimentSatisfiedAltIcon />,\r\n    label: 'Satisfied',\r\n  },\r\n  5: {\r\n    icon: <SentimentVerySatisfiedIcon />,\r\n    label: 'Very Satisfied',\r\n  },\r\n};\r\n\r\nfunction IconContainer(props) {\r\n  const { value, ...other } = props;\r\n  return <span {...other}>{likertIcons[value].icon}</span>;\r\n}\r\n\r\nIconContainer.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function SleepInput() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    //Reset all states to default\r\n    setActivity({\r\n      moodRating: 0,\r\n      sleepDate: '',\r\n      sleepTime: '',\r\n      awakeTime: '',\r\n      invalidDate: false,\r\n      invalidSleep: false,\r\n      invalidAwake: false\r\n    });\r\n  };\r\n\r\n  // ------------------------- Activity States and handlers ------------------------- //\r\n\r\n  const [activity, setActivity] = React.useState({\r\n      moodRating: 0,\r\n      sleepDate: '',\r\n      sleepTime: '',\r\n      awakeTime: '',\r\n      invalidDate: false,\r\n      invalidSleep: false,\r\n      invalidAwake: false\r\n  });\r\n\r\n  const handleFormChange = (event) => {\r\n    setActivity({ ...activity, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  //Custom method to handle Date object to be seen as a React SyntheticEvent by using the target object layout\r\n  const handleDateChange = (dateArg) => {\r\n    var dateEventObj = {\"target\": {\"name\": \"sleepDate\", \"value\": dateArg} }\r\n    handleFormChange(dateEventObj);\r\n  };\r\n\r\n  //Custom method to handle sleep time object to be seen as a React SyntheticEvent by using the target object layout\r\n  const handleSleepChange = (timeArg) => {\r\n    var sleepEventObj = {\"target\": {\"name\": \"sleepTime\", \"value\": timeArg} }\r\n    handleFormChange(sleepEventObj);\r\n  };\r\n\r\n  //Custom method to handle awake time object to be seen as a React SyntheticEvent by using the target object layout\r\n  const handleAwakeChange = (timeArg) => {\r\n    var awakeEventObj = {\"target\": {\"name\": \"awakeTime\", \"value\": timeArg} }\r\n    handleFormChange(awakeEventObj);\r\n  };\r\n\r\n  //Method to create Activity and Weight using the WeightService\r\n  const submitInput = () => {\r\n\r\n    //Debug display values requested\r\n    console.log('Activity States:', activity)\r\n\r\n    //Validation - (BASE CASE): Check if the weight and date is present\r\n    if((activity.sleepDate === '' || activity.sleepDate === null || activity.sleepDate === undefined || isNaN(activity.sleepDate)) || (activity.sleepTime === '' || activity.sleepTime === null || activity.sleepTime == undefined || isNaN(activity.sleepTime)) || (activity.awakeTime === '' || activity.awakeTime === null || activity.awakeTime === undefined || isNaN(activity.awakeTime))){\r\n\r\n      var invalidDate = false\r\n      var invalidSleep = false\r\n      var invalidAwake = false\r\n\r\n      //If the date has not been input, Display Date Error\r\n      if(activity.sleepDate === '' || activity.sleepDate === null || activity.sleepDate === undefined){\r\n        invalidDate = true\r\n      }else{\r\n        invalidDate = false\r\n      }\r\n\r\n      //If the sleep time is incorrect or has not been input, Display Sleep Error\r\n      //Note: Invalid Date is returned by the Time Picker if the time entered is incorrect\r\n      if(activity.sleepTime === '' || activity.sleepTime === null || activity.sleepTime === undefined || isNaN(activity.sleepTime)){\r\n        invalidSleep = true\r\n      }else{\r\n        invalidSleep = false\r\n      }\r\n\r\n      //If the awake time is incorrect or has not been input, Display Awake Error\r\n      //Note: Invalid Date is returned by the Time Picker if the time entered is incorrect\r\n      if(activity.awakeTime === '' || activity.awakeTime === null || activity.awakeTime === undefined || isNaN(activity.awakeTime)){\r\n        invalidAwake = true\r\n      }else{\r\n        invalidAwake = false\r\n      }\r\n\r\n      //Set react states\r\n      setActivity({ ...activity, \r\n        invalidDate: invalidDate,\r\n        invalidSleep: invalidSleep,\r\n        invalidAwake: invalidAwake\r\n       });\r\n\r\n    }else{\r\n      //Assign values to the spring fields accordingly (the fields that are unused)\r\n\r\n      //--- Start Date and Time ---//\r\n      //Merge Date object with the sleep date and the just the sleep time to a DateTime obj\r\n      var ActivityStartDateTime = new Date(activity.sleepDate.getFullYear(), activity.sleepDate.getMonth(), activity.sleepDate.getDay(), activity.sleepTime.getHours(), activity.sleepTime.getMinutes(), activity.sleepTime.getSeconds(), activity.sleepTime.getMilliseconds())\r\n\r\n      //Spring requires a format of HR:MIN:SEC for a Time object\r\n\r\n      //Get the TimeString elements of this Date object\r\n      var springFormatSleepTime = ActivityStartDateTime.toTimeString();\r\n      //Get the first element from this object (this one is the Date return of the HR:MIN:SEC format)\r\n      springFormatSleepTime = springFormatSleepTime.split(' ')[0];\r\n\r\n      //--- End Date and Time ---//\r\n      //Set the next day object with the sleep date and the awake time (the Date will be incremented after this step!!!)\r\n      var ActivityEndDateTime = new Date(activity.sleepDate.getFullYear(), activity.sleepDate.getMonth(), activity.sleepDate.getDay(), activity.awakeTime.getHours(), activity.awakeTime.getMinutes(), activity.awakeTime.getSeconds(), activity.awakeTime.getMilliseconds());\r\n\r\n      //The object with the next day set (using the SetDate to meet DST)\r\n      ActivityEndDateTime.setDate(ActivityEndDateTime.getDate() + 1);\r\n\r\n      //Spring requires a format of HR:MIN:SEC for a Time object\r\n\r\n      //Get the TimeString elements of this Date object\r\n      var springFormatAwakeTime = ActivityEndDateTime.toTimeString();\r\n      //Get the first element from this object (this one is the Date return of the HR:MIN:SEC format)\r\n      springFormatAwakeTime = springFormatAwakeTime.split(' ')[0];\r\n\r\n      //--- Sleeping Hours ---//\r\n      //Working out time difference between sleepTime and awakeTime in ms\r\n      var duration = activity.awakeTime.valueOf() - activity.sleepTime.valueOf();\r\n\r\n      //Now convert ms to hrs, ms -> secs (1000) -> mins (60) -> hrs (60) and then round to 2dp for easier data management, then using the unary + operator to make from string to double again!\r\n      var sleepingHrs = +(duration/1000/60/60).toFixed(2);\r\n\r\n      //Add 24 hours if the calculated duration is negative (it has reached one day)\r\n      if (sleepingHrs < 0) {\r\n        sleepingHrs = 24 + sleepingHrs;\r\n     }\r\n\r\n      //Create records in Activity and Weight\r\n      SleepStoreService.createRecord(\r\n        ActivityStartDateTime,\r\n        ActivityEndDateTime,\r\n        activity.moodRating,\r\n        0,\r\n        ActivityStartDateTime,\r\n        springFormatSleepTime,\r\n        springFormatAwakeTime,\r\n        sleepingHrs,\r\n      ).then(() => {\r\n        //Successful Creation\r\n        handleClose()\r\n        //Reload component by routing to a different component and back again\r\n        history.push('/app/dashboard');\r\n        history.push('/app/sleep');\r\n      }).catch((error) => {\r\n        //TODO: Error handling dialog,message,etc.\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Fab color=\"primary\" aria-label=\"add\" className={classes.extendedIcon} onClick={handleClickOpen}>\r\n        <AddIcon />\r\n      </Fab>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Sleep Input\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={submitInput}>\r\n              Add Sleep\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n        <ListItem>\r\n        <ListItem>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                fullWidth\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                margin=\"normal\"\r\n                id=\"sleepDate\"\r\n                name=\"sleepDate\"\r\n                label=\"Sleep Date\"\r\n                format=\"dd/MM/yyyy\"\r\n                value={activity.sleepDate || null}\r\n                onChange={handleDateChange}\r\n                //required\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n                error={activity.invalidDate}\r\n                helperText={activity.invalidDate && \"Date is required\"}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </ListItem>\r\n          <ListItem>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardTimePicker\r\n                fullWidth\r\n                InputLabelProps={{\r\n                  shrink: true\r\n                }}\r\n                margin=\"normal\"\r\n                id=\"sleepTime\"\r\n                name=\"sleepTime\"\r\n                label=\"Time when you slept\"\r\n                value={activity.sleepTime || null}\r\n                onChange={handleSleepChange}\r\n                //required\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change time',\r\n                }}\r\n                error={activity.invalidSleep}\r\n                helperText={activity.invalidSleep && \"Time is required\"}\r\n              />\r\n            </MuiPickersUtilsProvider>\r\n          </ListItem>\r\n          <ListItem>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardTimePicker\r\n                fullWidth\r\n                InputLabelProps={{\r\n                    shrink: true\r\n                }}\r\n                margin=\"normal\"\r\n                id=\"awakeTime\"\r\n                name=\"awakeTime\"\r\n                label=\"Time of waking next day\"\r\n                value={activity.awakeTime || null}\r\n                onChange={handleAwakeChange}\r\n                //required\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change time',\r\n                }}\r\n                error={activity.invalidAwake}\r\n                helperText={activity.invalidAwake && \"Time is required\"}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n            </ListItem>\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Typography component=\"legend\">How did you feel about this measurement?</Typography>\r\n            <Rating\r\n            name=\"moodRating\"\r\n            size=\"large\"\r\n            value={activity.moodRating || null}\r\n            defaultValue={2}\r\n            getLabelText={(value) => likertIcons[value].label}\r\n            IconContainerComponent={IconContainer}\r\n            onChange={handleFormChange}\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Chart\r\nimport WeightChart from './visualisation/SleepChart';\r\n\r\n//Import Table\r\nimport WeightTable from './visualisation/SleepTable';\r\n\r\n//Import Weight Input Button\r\nimport WeightInput from './actionButton/SleepInput'\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    extendedIcon: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nexport default function SleepView(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <WeightChart />\r\n      <WeightTable />\r\n      <WeightInput />\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Import Weight view\r\nimport SleepView from '../components/sleep/SleepView'\r\n\r\n//Create Landing class using Component instace\r\nclass Sleep extends React.Component {\r\n  \r\n  //Appearance settings\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n          primary: {\r\n            main: this.getPrimaryColour()\r\n          },\r\n          secondary: {\r\n            main: this.getSecondaryColour()\r\n          }\r\n        }\r\n      })}>\r\n      <Navbar title='Sleep' searchField='true' />\r\n      <SleepView />\r\n      </MuiThemeProvider>\r\n    </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Sleep;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass MarketingSettings {\r\n\r\n    //Method to get all marketing settings\r\n    async getMarketingSettings(){\r\n        var marketingID;\r\n\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => marketingID = response.marketing);\r\n\r\n        const marketingResponse = await this.getMarketingData(marketingID)\r\n\r\n        //await console.log(marketingResponse)\r\n\r\n        return marketingResponse\r\n    }\r\n\r\n    //Method to get state from marketing\r\n    async getMarketingState(state){\r\n        var marketingID, value;\r\n\r\n        //Get the marketingID record number from the current user\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => marketingID = response.marketing);\r\n\r\n        //Store the response from the marketing data of this user temporarily\r\n        const marketingResponse = await this.getMarketingData(marketingID)\r\n\r\n        //Check which state to change\r\n        if(state === 'achievementsPreference'){\r\n            value = marketingResponse.achievementsPreference;\r\n        }else if(state === 'dailyEmailProgressPreference'){\r\n            value = marketingResponse.dailyEmailProgressPreference;\r\n        }else if(state === 'marketingEmailPreference'){\r\n            value = marketingResponse.marketingEmailPreference;\r\n        }else if(state === 'marketingRoadmapPreference'){\r\n            value = marketingResponse.marketingRoadmapPreference;\r\n        }else if(state === 'progressPreference'){\r\n            value = marketingResponse.progressPreference;\r\n        }else if(state === 'weeklyEmailProgressPreference'){\r\n            value = marketingResponse.weeklyEmailProgressPreference;\r\n        }else{\r\n            //do not display any values - state is incorrect\r\n        }\r\n\r\n        //console.log(state,value)\r\n\r\n        //Return the value of this state\r\n        return value;\r\n    }\r\n\r\n    //Method to set marketing data\r\n    async setMarketingState(state,value){\r\n        var marketingID;\r\n\r\n        //Get Marketing mapping id\r\n        await this.initialiseSettingMappings(sessionStorage.getItem('CurrentUsername')).then(response => marketingID = response.marketing);\r\n\r\n        //Store the response from the marketing data of this user temporarily\r\n        const marketingResponse = await this.getMarketingData(marketingID)\r\n\r\n        //Check which state to change\r\n        if(state === 'achievementsPreference'){\r\n            marketingResponse.achievementsPreference = value;\r\n        }else if(state === 'dailyEmailProgressPreference'){\r\n            marketingResponse.dailyEmailProgressPreference = value;\r\n        }else if(state === 'marketingEmailPreference'){\r\n            marketingResponse.marketingEmailPreference = value;\r\n        }else if(state === 'marketingRoadmapPreference'){\r\n            marketingResponse.marketingRoadmapPreference = value;\r\n        }else if(state === 'progressPreference'){\r\n            marketingResponse.progressPreference = value;\r\n        }else if(state === 'weeklyEmailProgressPreference'){\r\n            marketingResponse.weeklyEmailProgressPreference = value;\r\n        }else{\r\n            //do not change any values - state is incorrect\r\n        }\r\n\r\n        //Update the marketing record accordingly\r\n        await this.updateMarketingRecord(marketingID,marketingResponse);\r\n    }\r\n    \r\n    //Method to get user setting mappings\r\n    async initialiseSettingMappings(username){\r\n        return axios.get(`${SpringHostURL}/api/users/username/${username}`,{\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to get user setting mappings\r\n    async getMarketingData(id){\r\n        return axios.get(`${SpringHostURL}/api/users/settings/marketing/${id}`,{\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to modify marketing response data\r\n    async updateMarketingRecord(id,marketingResponse){\r\n        return axios.put(`${SpringHostURL}/api/users/settings/marketing/${id}`,marketingResponse,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //\"Access-Control-Allow-Origin\": \"*\"\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new MarketingSettings()","//Import React library\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import material-ui typography\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//Import Material-ui layout\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Import Material-ui colour picker\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n//Import Material-ui forms\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\r\n\r\n//Import Settings\r\nimport MarketingSettings from '../../../services/settings/MarketingSettings'\r\nimport ThemeSettings from '../../../services/settings/ThemeSettings'\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      },\r\n    headingsText: {\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    headingsTextAlt: {\r\n      paddingTop: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    settingLabel: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    switch: {\r\n      marginTop: theme.spacing(-6),\r\n      marginRight: theme.spacing(3),\r\n      float: 'right'\r\n    }\r\n  }));\r\n\r\n  \r\n\r\nexport default function SettingsAppearance(props) {\r\n\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  // ------------------------- Appearance States and handlers ------------------------- //\r\n  const [appearance, setAppearance] = React.useState(\r\n      ThemeSettings.getAppearanceSettings()\r\n  );\r\n\r\n    //Load settings data before render\r\n    useEffect(() => {\r\n        setAppearance(ThemeSettings.getAppearanceSettings());\r\n    }, []);\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedAppearanceChange = (event) => {\r\n    //Perform changes to the Spring Backend (through Axios Put modifier)\r\n    ThemeSettings.setAppearanceState(event.target.name,event.target.checked);\r\n    //Set form value\r\n    setAppearance({ ...appearance, [event.target.name]: event.target.checked });\r\n    //Set storage value\r\n    //sessionStorage.setItem(event.target.name, event.target.checked)\r\n    history.push('/app/dashboard');\r\n    history.push('/app/settings');\r\n  };\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedAppearanceColourChange = (event) => {\r\n    //Perform changes to the Spring Backend (through Axios Put modifier)\r\n    ThemeSettings.setAppearanceState(event.target.name,event.target.value);\r\n    //Change internal React state\r\n    setAppearance({ ...appearance, [event.target.name]: event.target.value });\r\n    //Reload component theme delay by 100ms (to prevent infinite reloading whilst dragging colour slider)\r\n    setTimeout(function(){ history.push('/app/settings');}, 100);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Container fixed>\r\n        <Typography variant=\"h5\" component=\"h5\" className={classes.headingsTextAlt}>\r\n        Appearance\r\n        </Typography>\r\n          <Paper>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={11} xl={11}>\r\n                <Typography className={classes.settingLabel}>\r\n                    Appearance settings take effect when you change page\r\n                </Typography>\r\n\r\n                <Grid item xs={12}>\r\n                  <ColorPicker\r\n                    fullWidth\r\n                    name='primaryHexColour'\r\n                    label='Primary Theme Colour'\r\n                    defaultValue={'◼ Primary Colour'}\r\n                    value={appearance.primaryHexColour || sessionStorage.getItem(\"primaryHexColour\") }\r\n                    onChange={colourVal => handleCheckedAppearanceColourChange({\"target\": {\"name\": \"primaryHexColour\", \"value\": colourVal} })}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <ColorPicker\r\n                    fullWidth\r\n                    name='secondaryHexColour'\r\n                    label='Secondary Theme Colour'\r\n                    defaultValue={'◼ Secondary Colour'}\r\n                    value={appearance.secondaryHexColour || sessionStorage.getItem(\"secondaryHexColour\")}\r\n                    onChange={colourVal => handleCheckedAppearanceColourChange({\"target\": {\"name\": \"secondaryHexColour\", \"value\": colourVal} })}\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}> \r\n                  <Typography id=\"discrete-slider\" gutterBottom>\r\n                      Font Size\r\n                  </Typography>\r\n\r\n                  <Grid container spacing={2}>\r\n                      <Grid item>\r\n                        <TextFormatIcon />\r\n                      </Grid>\r\n                      \r\n                      <Grid item xs>\r\n                        <Slider\r\n                            defaultValue={12}\r\n                            aria-labelledby=\"discrete-slider\"\r\n                            valueLabelDisplay=\"auto\"\r\n                            step={2}\r\n                            marks\r\n                            min={10}\r\n                            max={30}\r\n                        />\r\n                      </Grid>\r\n\r\n                      <Grid item>\r\n                        <FormatSizeIcon />\r\n                      </Grid>\r\n                  </Grid>\r\n                  \r\n                </Grid>\r\n\r\n                <Grid item xs={12} spacing={2}>\r\n                  <FormControlLabel\r\n                      control={<Checkbox checked={appearance.darkMode} onChange={handleCheckedAppearanceChange} name=\"darkMode\" />}\r\n                      label=\"Dark Mode\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                      control={<Checkbox checked={appearance.highContrast || sessionStorage.getItem(\"highContrast\")} onChange={handleCheckedAppearanceChange} name=\"highContrast\" />}\r\n                      label=\"High Contrast\"\r\n                  />\r\n                </Grid>\r\n\r\n              </Grid>\r\n          </Grid>\r\n          \r\n        </Paper>\r\n        \r\n      </Container>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import material-ui typography\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//Import Material-ui layout\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Import Material-ui Switches\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n//Import Settings\r\nimport MarketingSettings from '../../../services/settings/MarketingSettings'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      },\r\n    headingsText: {\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    headingsTextAlt: {\r\n      paddingTop: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    settingLabel: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    switch: {\r\n      marginTop: theme.spacing(-6),\r\n      marginRight: theme.spacing(3),\r\n      float: 'right'\r\n    }\r\n  }));\r\n\r\n  \r\n\r\nexport default function Navbar(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  // ------------------------- Marketing States and handlers ------------------------- //\r\n\r\n  const [marketing, setMarket] = React.useState({\r\n    achievementsPreference: MarketingSettings.getMarketingState('achievementsPreference'),\r\n    dailyEmailProgressPreference: MarketingSettings.getMarketingState('dailyEmailProgressPreference'),\r\n    marketingEmailPreference: MarketingSettings.getMarketingState('marketingEmailPreference'),\r\n    marketingRoadmapPreference: MarketingSettings.getMarketingState('marketingRoadmapPreference'),\r\n    progressPreference: MarketingSettings.getMarketingState('progressPreference'),\r\n    weeklyEmailProgressPreference: MarketingSettings.getMarketingState('weeklyEmailProgressPreference'),\r\n  });\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedMarketingChange = (event) => {\r\n    //Perform changes to the Spring Backend (through Axios Put modifier)\r\n    MarketingSettings.setMarketingState(event.target.name,event.target.checked);\r\n    //Change internal React state\r\n    handleMarketChange(event);\r\n  };\r\n\r\n  const handleMarketChange = (event) => {\r\n    setMarket({ ...marketing, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <Container fixed>\r\n        <Typography variant=\"h5\" component=\"h5\" className={classes.headingsTextAlt}>\r\n        Marketing\r\n        </Typography>\r\n        <Paper>\r\n\r\n        <Grid container spacing={3}>\r\n            <Grid item xs={12} xl={12}>\r\n            <Typography className={classes.settingLabel}>\r\n                📩 Marketing communications\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.marketingEmailPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"marketingEmailPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                📆 Daily health progress\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.dailyEmailProgressPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"dailyEmailProgressPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                📅 Weekly health progress\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.weeklyEmailProgressPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"weeklyEmailProgressPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🏆 Achievements gained\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.achievementsPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"achievementsPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🚗 Roadmap development plans\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.marketingRoadmapPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"marketingRoadmapPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🔧 Current development progress\r\n            </Typography>\r\n            <Switch\r\n                checked={marketing.weeklyEmailProgressPreference}\r\n                onChange={handleCheckedMarketingChange}\r\n                name=\"weeklyEmailProgressPreference\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            </Grid>              \r\n        </Grid>\r\n        </Paper>\r\n\r\n    </Container>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import material-ui typography\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//Import Material-ui layout\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Import Material-ui Switches\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n//Import Settings\r\nimport MarketingSettings from '../../../services/settings/MarketingSettings'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      },\r\n    headingsText: {\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    headingsTextAlt: {\r\n      paddingTop: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    settingLabel: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    switch: {\r\n      marginTop: theme.spacing(-6),\r\n      marginRight: theme.spacing(3),\r\n      float: 'right'\r\n    }\r\n  }));\r\n\r\n  \r\n\r\nexport default function Navbar(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  //const [state, setState] = React.useState(MarketingSettings.getMarketingSettings());\r\n\r\n  // ------------------------- Notification States and handlers ------------------------- //\r\n  const [notification, setNotification] = React.useState({\r\n    blankTOBEDONE: MarketingSettings.getMarketingState('achievementsPreference'),\r\n  });\r\n\r\n  // Convert 'checked' to 'value' before performing handleChange\r\n  const handleCheckedNotificationChange = (event) => {\r\n    //Perform changes to the Spring Backend (through Axios Put modifier)\r\n    MarketingSettings.setMarketingState(event.target.name,event.target.checked);\r\n    //Change internal React state\r\n    handleNotificationChange(event);\r\n  };\r\n\r\n  const handleNotificationChange = (event) => {\r\n    setNotification({ ...notification, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <Container fixed>\r\n        <Typography variant=\"h5\" component=\"h5\" className={classes.headingsTextAlt}>\r\n        Notifications\r\n        </Typography>\r\n\r\n        <Paper>\r\n        \r\n        <Grid container spacing={3}>\r\n        <Grid item xs={12} xl={12}>\r\n            <Typography className={classes.settingLabel}>\r\n                📆 Daily activity\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationDaily\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                📅 Weekly activity\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationWeekly\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                ⌛ Monthly activity\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationMonthly\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🤸🏻 Missed weight recordings\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationWeight\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🤸🏻‍♂️ Fitness progress\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationProgress\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            <Typography className={classes.settingLabel}>\r\n                🏆 Achievements\r\n            </Typography>\r\n            <Switch\r\n                checked={notification.blankTOBEDONE}\r\n                onChange={handleCheckedNotificationChange}\r\n                name=\"notificationAchievements\"\r\n                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                className={classes.switch}\r\n            />\r\n            </Grid>\r\n        </Grid>\r\n        </Paper>\r\n\r\n    </Container>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Material-ui preloader\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//Import material-ui typography\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//Import Material-ui layout\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Container from '@material-ui/core/Container';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n//Import Material-ui Switches\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\n//Import Material-ui colour picker\r\nimport ColorPicker from 'material-ui-color-picker'\r\n\r\n//Import Material-ui forms\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\r\nimport FormatSizeIcon from '@material-ui/icons/FormatSize';\r\n\r\n//Import Settings\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      },\r\n    headingsText: {\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    headingsTextAlt: {\r\n      paddingTop: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    settingLabel: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n\r\n    switch: {\r\n      marginTop: theme.spacing(-6),\r\n      marginRight: theme.spacing(3),\r\n      float: 'right'\r\n    }\r\n  }));\r\n\r\n  \r\n\r\nexport default function SettingsPersonal(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    <Container fixed>\r\n          <Typography variant=\"h5\" component=\"h5\" className={classes.headingsText}>\r\n            Personal\r\n          </Typography>\r\n          <Paper>\r\n            <Grid container spacing={3}>\r\n              <Grid item xs={10} xl={11}>\r\n                <Typography className={classes.settingLabel}>\r\n                  Personal settings go here\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n    </Container>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import Settings components\r\nimport AppearanceSettings from './preferences/SettingsAppearance';\r\nimport MarketingSettings from './preferences/SettingsMarketing';\r\nimport NotificationsSettings from './preferences/SettingsNotifications';\r\nimport PersonalSettings from './preferences/SettingsPersonal'; \r\n\r\n//Material-Ui CSS baseline theme (manipulates colour palettes for dark/light)\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    },\r\n  headingsText: {\r\n    padding: theme.spacing(3),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n\r\n  headingsTextAlt: {\r\n    paddingTop: theme.spacing(6),\r\n    padding: theme.spacing(3),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n\r\n  settingLabel: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'left',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n\r\n  switch: {\r\n    marginTop: theme.spacing(-6),\r\n    marginRight: theme.spacing(3),\r\n    float: 'right'\r\n  }\r\n}));\r\n\r\nexport default function SettingsView(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <PersonalSettings />\r\n      <AppearanceSettings />\r\n      <NotificationsSettings />\r\n      <MarketingSettings />\r\n\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\nimport SettingsView from '../components/settings/SettingsView';\r\n\r\nimport Box from '@material-ui/core/Box';\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\n\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Create Landing class using Component instace\r\nclass Settings extends React.Component {\r\n\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n  \r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n    \r\n    //TODO Logic for searchField prop in Navbar.jsx\r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n            primary: {\r\n              main: this.getPrimaryColour()\r\n            },\r\n            secondary: {\r\n              main: this.getSecondaryColour()\r\n            }\r\n          }\r\n        })}>\r\n          <Navbar title='Settings' searchField='true' />\r\n          <Box m={2} />\r\n          <SettingsView />\r\n        </MuiThemeProvider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default Settings;","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass waterIntakeGet {\r\n\r\n    //Method to get all water intake activities by the current user\r\n    async getUserActivity(){\r\n        //Get Activity Data\r\n        const activityDataRes = await this.getActivityData()\r\n\r\n        console.log('act', activityDataRes)\r\n\r\n        //Filter just results by this user\r\n        const userActivityRes = activityDataRes.filter(function(item){\r\n            return item.userID == sessionStorage.getItem('UserID');         \r\n        });\r\n\r\n        console.log('usr', userActivityRes)\r\n\r\n        //Finally, filter results by water intake measurements\r\n        const userActivityWaterIntake = userActivityRes.filter(function(item){\r\n            return item.activityType == 'waterIntake'\r\n        });\r\n\r\n        console.log('filt', userActivityWaterIntake)\r\n\r\n        return userActivityWaterIntake\r\n    }\r\n\r\n    //Method to get all water intake measurements by the current user\r\n    async getUserWaterIntake(userActivityWaterIntake){\r\n        //Get filtered data from the user that only contains water intake measurements\r\n        const waterIntakeDataRes = await this.getWaterIntakeData()\r\n\r\n        //Filter out just the activityID's from WeightData\r\n        var userActivities = userActivityWaterIntake.map(a => a.activityID);\r\n\r\n        //Filter just results from the filtered UserID and WaterIntakeMeasurement from previous filter\r\n        const filteredWaterIntakes = waterIntakeDataRes.filter(item => userActivities.includes(item.activityID));\r\n\r\n        //Merge the userActivity object with the userActivityWater object using the arrays.map function\r\n        const mergedResponses = userActivityWaterIntake.map(activityMapping => ({...activityMapping, ...filteredWaterIntakes.find(waterIntakeMapping => waterIntakeMapping.activityID === activityMapping.activityID)}))\r\n\r\n        return mergedResponses\r\n    }\r\n\r\n    //Main Method to get User Data, merge filtered data and return this water intake data only by the user and only activities that are water intake\r\n    async getUserData(){\r\n        //Get Activity User Response\r\n        const activityDataFilter = await this.getUserActivity()\r\n\r\n        //Get those activity Water Intake data now\r\n        const WaterIntakeDataFilterMerge = await this.getUserWaterIntake(activityDataFilter)\r\n\r\n        return WaterIntakeDataFilterMerge\r\n    }\r\n\r\n    //Method to get activity data\r\n    async getActivityData(){\r\n        return axios.get(`${SpringHostURL}/api/activities`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to get activity water intake data\r\n    async getWaterIntakeData(){\r\n        return axios.get(`${SpringHostURL}/api/activities/water`,{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n        //The post method was not successful and some error has occured\r\n\r\n        //To get error status, we can log it to the console using console.log(error.response.status)\r\n        //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n    .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new waterIntakeGet()","import React, { useState, useEffect } from 'react';\r\n\r\n//Import Recharts for line graph rendering\r\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer} from 'recharts';\r\n\r\n//Import WaterIntakeGet service\r\nimport WaterIntakeGet from '../../services/activities/waterIntakeGet';\r\n\r\n//Grey Tooltip text (fixes white Theme css)\r\nimport './tooltip.css';\r\n\r\nexport default function RowsGrid() {\r\n\r\n\t\t//State for chart data to be appended on\r\n\t\tconst [chartData,setChartData] = useState([]);\r\n\r\n\t\t//Load chart data before render\r\n\t\tuseEffect(() => {\r\n\t\t\tWaterIntakeGet.getUserData().then(dataResponse => {\r\n\t\t\t\t//Update Chart data\r\n\t\t\t\tsetChartData(dataResponse);\r\n\t\t\t})\r\n\t\t\t}, []);\r\n\r\n\t\treturn (\r\n\t\t\t<ResponsiveContainer width=\"99%\" height={400}>\r\n                <AreaChart width={730} height={250} data={chartData}\r\n                    margin={{ top: 10, right: 30, left: 0, bottom: 0 }} >\r\n                    <defs>\r\n                        <linearGradient id=\"Water Intake\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                            <stop offset=\"5%\" stopColor=\"#4290f5\" stopOpacity={0.8} />\r\n                            <stop offset=\"95%\" stopColor=\"#4290f5\" stopOpacity={0} />\r\n                        </linearGradient>\r\n                    </defs>\r\n                    <XAxis dataKey=\"activityStart\"/>\r\n                    <YAxis />\r\n                    <CartesianGrid strokeDasharray=\"7 7\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Area type=\"monotone\" dataKey=\"litres\" name=\"Water Intake (in ml)\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#WaterIntake)\" unit=\" ml\"/>\r\n                </AreaChart>\r\n\t\t\t</ResponsiveContainer>\r\n\t\t);\r\n\t\r\n}","import React, {useState, useEffect} from \"react\";\r\n\r\n//Import DataGrid (table) and Grid toolbar (export features)\r\nimport { DataGrid, GridToolbar } from '@material-ui/data-grid';\r\n\r\n//Import WaterIntakeGet service\r\nimport WaterIntakeGet from '../../services/activities/waterIntakeGet'\r\n\r\nexport default function RowsGrid() {\r\n\r\n    //State for table rows to be appended on\r\n    const [tableRows,setTableRow] = useState([]);\r\n  \r\n    //Define table columns for DataGrid\r\n    const tableColumns = [\r\n        { field: \"activityStart\", headerName: \"Date/Time\", description: 'The date/time of the weight measurement.', type: 'dateTime', flex: 0.9},\r\n        { field: \"moodRating\", headerName: \"Mood Rating\", description: 'Mood rating is out of 5, with 5 being the most motivated.', type: 'number', flex: 0.5},\r\n        { field: \"litres\", headerName: \"Amount (L)\", description: 'Amount is measured in litres.', type: 'number', flex: 0.5},\r\n        ];\r\n\r\n    //Load table data before render\r\n    useEffect(() => {\r\n        WaterIntakeGet.getUserData().then(dataResponse => {\r\n            //Change ActivityID to id (required ID field for DataGrid)\r\n            var DataGridID = dataResponse.map(item => { return { ...item, id: item.activityID }; });\r\n\r\n            console.log(DataGridID)\r\n\r\n            //Update Row fields\r\n            setTableRow(DataGridID);\r\n          })\r\n        }, []);\r\n\r\n    return (\r\n        <div style={{ height: '50vh', width: '98%' }}>\r\n        <DataGrid\r\n            columns={tableColumns}\r\n            rows={tableRows}\r\n            components={{\r\n                Toolbar: GridToolbar,\r\n              }}\r\n            pageSize={10}\r\n            rowsPerPageOptions={[10, 20, 50, 150, 365]}\r\n        />\r\n        </div>\r\n    );\r\n}","//Import Axios library to proxy requests to Spring server\r\nimport axios from 'axios'\r\n\r\n//Setup constant for Spring Host - this will be changed in production *Include port but no endpoints!*\r\nimport { SpringHostURL } from '../../constants/constant'\r\n\r\nclass waterIntakeStore {\r\n\r\n    // Method to initialise creating a record\r\n    async createRecord(\r\n        startDateTime,\r\n        endDateTime,\r\n        activityType,\r\n        moodRating,\r\n        waterIntake,\r\n    ){\r\n        //Create the activity record\r\n        const activityResponse = await this.createActivity(startDateTime, endDateTime, activityType, moodRating, sessionStorage.getItem('UserID'))\r\n\r\n        //Create the parent water intake activity record\r\n        const waterIntakeResponse = await this.createWaterIntake(activityResponse, waterIntake)\r\n\r\n        return waterIntakeResponse\r\n    }\r\n    \r\n\r\n    //Method to create Activity data\r\n    async createActivity(\r\n        startDateTime,\r\n        endDateTime,\r\n        activityType,\r\n        moodRating,\r\n        userID\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities`,{\r\n            //Json Body content\r\n            \"userID\": userID,\r\n            \"activityStart\": startDateTime,\r\n            \"activityEnd\": endDateTime,\r\n            \"activityType\": activityType,\r\n            \"moodRating\": moodRating\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    //Method to create Water Intake activity\r\n    async createWaterIntake(\r\n        activityID,\r\n        waterIntake,\r\n    ){\r\n        return axios.post(`${SpringHostURL}/api/activities/water`,{\r\n            //Json Body content\r\n            \"activityID\": activityID,\r\n            \"litres\": waterIntake,\r\n        },{\r\n            headers: {\r\n                //Set the post content as application/json (Spring will not recognise text for this auth endpoint PostMapping)\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                //Set Bearer Token JWT auth\r\n                'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            }\r\n        }).then(response => response.data)\r\n            //The post method was not successful and some error has occured\r\n\r\n            //To get error status, we can log it to the console using console.log(error.response.status)\r\n            //To get the error msg, we can log it to the console using console.log(error.response.data.error)\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n}\r\n\r\nexport default new waterIntakeStore()","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n//Import Material-ui Floating Button\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\n//Material-Ui Pickers\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDateTimePicker,\r\n} from '@material-ui/pickers';\r\n\r\n//Material-Ui Rating\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport PropTypes from 'prop-types';\r\n\r\n//Material-Ui Rating Icons\r\nimport SentimentVeryDissatisfiedIcon from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport SentimentDissatisfiedIcon from '@material-ui/icons/SentimentDissatisfied';\r\nimport SentimentSatisfiedIcon from '@material-ui/icons/SentimentSatisfied';\r\nimport SentimentSatisfiedAltIcon from '@material-ui/icons/SentimentSatisfiedAltOutlined';\r\nimport SentimentVerySatisfiedIcon from '@material-ui/icons/SentimentVerySatisfied';\r\n\r\n//Material-Ui TextField\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n// WeightStoreService\r\nimport WeightStoreService from '../../services/activities/waterIntakeStore';\r\n\r\n//Include React Router history (5.1+ required) - mitigation from nested components\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n  extendedIcon: {\r\n    position: \"fixed\",\r\n    bottom: theme.spacing(10),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst likertIcons = {\r\n  1: {\r\n    icon: <SentimentVeryDissatisfiedIcon />,\r\n    label: 'Very Dissatisfied',\r\n  },\r\n  2: {\r\n    icon: <SentimentDissatisfiedIcon />,\r\n    label: 'Dissatisfied',\r\n  },\r\n  3: {\r\n    icon: <SentimentSatisfiedIcon />,\r\n    label: 'Neutral',\r\n  },\r\n  4: {\r\n    icon: <SentimentSatisfiedAltIcon />,\r\n    label: 'Satisfied',\r\n  },\r\n  5: {\r\n    icon: <SentimentVerySatisfiedIcon />,\r\n    label: 'Very Satisfied',\r\n  },\r\n};\r\n\r\nfunction IconContainer(props) {\r\n  const { value, ...other } = props;\r\n  return <span {...other}>{likertIcons[value].icon}</span>;\r\n}\r\n\r\nIconContainer.propTypes = {\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default function WaterIntakeInput() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    //Reset all states to default\r\n    setActivity({\r\n      startDateTime: '',\r\n      endDateTime: '',\r\n      activityType: 'waterIntake',\r\n      moodRating: 0,\r\n      waterIntake: 0,\r\n      invalidDate: false,\r\n      invalidWaterIntake: false}\r\n    );\r\n  };\r\n\r\n  // ------------------------- Activity States and handlers ------------------------- //\r\n\r\n  const [activity, setActivity] = React.useState({\r\n      startDateTime: '',\r\n      endDateTime: '',\r\n      activityType: 'waterIntake',\r\n      moodRating: 0,\r\n      waterIntake: 0,\r\n      invalidDate: false,\r\n      invalidWaterIntake: false,\r\n  });\r\n\r\n  const handleFormChange = (event) => {\r\n    console.log('event',event)\r\n    setActivity({ ...activity, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  //Custom method to handle Date object to be seen as a React SyntheticEvent by using the target object layout\r\n  const handleDateChange = (dateArg) => {\r\n    var dateEventObj = {\"target\": {\"name\": \"startDateTime\", \"value\": dateArg} }\r\n    handleFormChange(dateEventObj);\r\n  };\r\n\r\n  //Method to create Activity and Water Intake using the WaterIntakeService\r\n  const submitInput = () => {\r\n\r\n    //Validation - (BASE CASE): Check if the waterIntake and date is present\r\n    if((activity.waterIntake === null || activity.waterIntake === '' || parseInt(activity.waterIntake) <= 0) || (activity.startDateTime === null || activity.startDateTime === '')){\r\n\r\n      var invalidWaterIntake = false\r\n      var invalidDate = false\r\n\r\n      //If the waterIntake has not been input\r\n      if(activity.waterIntake === null || activity.waterIntake === '' || parseInt(activity.waterIntake) <= 0){\r\n        invalidWaterIntake = true\r\n      }else{\r\n        invalidWaterIntake = false\r\n      }\r\n\r\n      //If the date has not been input, Display Date Error\r\n      if(activity.startDateTime === null || activity.startDateTime === ''){\r\n        invalidDate = true\r\n      }else{\r\n        invalidDate = false\r\n      }\r\n\r\n      //Set React States\r\n      setActivity({ ...activity,\r\n        invalidWaterIntake: invalidWaterIntake,\r\n        invalidDate: invalidDate\r\n       });\r\n\r\n    }else{\r\n\r\n      //Create records in Activity and Weight\r\n      WeightStoreService.createRecord(activity.startDateTime,\r\n        activity.endDateTime,\r\n        activity.activityType,\r\n        activity.moodRating,\r\n        activity.waterIntake,\r\n      ).then(() => {\r\n        //Successful Creation\r\n        handleClose()\r\n        //Reload component by routing to a different component and back again\r\n        history.push('/app/dashboard');\r\n        history.push('/app/water');\r\n      }).catch((error) => {\r\n        //TODO: Error handling dialog,message,etc.\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Fab color=\"primary\" aria-label=\"add\" className={classes.extendedIcon} onClick={handleClickOpen}>\r\n        <AddIcon />\r\n      </Fab>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Log Water Intake\r\n            </Typography>\r\n            <Button autoFocus color=\"inherit\" onClick={submitInput}>\r\n              + Add Record\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <List>\r\n          <ListItem>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDateTimePicker\r\n                fullWidth\r\n                InputLabelProps={{\r\n                    shrink: true\r\n                }}\r\n                margin=\"normal\"\r\n                id=\"startDateTime\"\r\n                label=\"Date\"\r\n                format=\"dd/MM/yyyy\"\r\n                value={activity.startDateTime || null}\r\n                onChange={handleDateChange}\r\n                //required\r\n                KeyboardButtonProps={{\r\n                    'aria-label': 'change date',\r\n                }}\r\n                error={activity.invalidDate}\r\n                helperText={activity.invalidDate && \"Date or Date and Time is required\"}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n          </ListItem>\r\n          <ListItem>\r\n              <TextField\r\n              label=\"Water Intake\"\r\n              id=\"waterIntake\"\r\n              type=\"number\"\r\n              name=\"waterIntake\"\r\n              value={activity.waterIntake || null}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position=\"end\">L</InputAdornment>,\r\n              }}\r\n              onChange={handleFormChange}\r\n              error={activity.invalidWaterIntake}\r\n              helperText={activity.invalidWaterIntake && \"Water amount (in litres) is required\"}\r\n              fullWidth\r\n            />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem>\r\n            <Typography component=\"legend\">How did you feel about this measurement?</Typography>\r\n            <Rating\r\n            name=\"moodRating\"\r\n            size=\"large\"\r\n            value={activity.moodRating || null}\r\n            defaultValue={2}\r\n            getLabelText={(value) => likertIcons[value].label}\r\n            IconContainerComponent={IconContainer}\r\n            onChange={handleFormChange}\r\n            />\r\n          </ListItem>\r\n        </List>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\n//Import Material-ui theming \r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n//Import WaterIntake Chart\r\nimport WaterIntakeChart from './WaterIntakeChart';\r\n\r\n//Import WaterIntake Table\r\nimport WaterIntakeTable from './WaterIntakeTable';\r\n\r\n//Import WaterIntake Input Button\r\nimport WaterIntakeInput from './WaterIntakeInput';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n    extendedIcon: {\r\n      position: \"fixed\",\r\n      bottom: theme.spacing(2),\r\n      right: theme.spacing(2),\r\n    },\r\n  }));\r\n\r\nexport default function WaterIntakeView() {\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <WaterIntakeChart />\r\n      <WaterIntakeTable />\r\n      <WaterIntakeInput />\r\n    </div>\r\n  );\r\n}","//Import React library\r\nimport React from 'react';\r\n\r\nimport Navbar from '../components/Navbar';\r\n\r\n//Theme provider\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n//Theming defaults and Session setters\r\nimport { defaultPrimary, defaultSecondary, defaultDarkMode} from '../constants/constant'\r\nimport ThemeSettings from '../services/settings/ThemeSettings'\r\n\r\n//Import Weight view\r\nimport WaterIntakeView from '../components/water/WaterIntakeView'\r\n\r\n//Create Landing class using Component instace\r\nclass WaterIntake extends React.Component {\r\n\r\n  //Appearance settings\r\n  getPrimaryColour = () => {\r\n    if(sessionStorage.getItem(\"primaryHexColour\") === null || sessionStorage.getItem(\"primaryHexColour\") === undefined ){\r\n      return defaultPrimary;\r\n    }else{\r\n      return sessionStorage.getItem(\"primaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getSecondaryColour = () => {\r\n    if(sessionStorage.getItem(\"secondaryHexColour\") === null || sessionStorage.getItem(\"secondaryHexColour\") === undefined ){\r\n      return defaultSecondary;\r\n    }else{\r\n      return sessionStorage.getItem(\"secondaryHexColour\");\r\n    }\r\n  }\r\n\r\n  getDarkMode = () => {\r\n    if(sessionStorage.getItem(\"darkMode\") === null || sessionStorage.getItem(\"darkMode\") === undefined ){\r\n      return defaultDarkMode;\r\n    }else{\r\n      if(sessionStorage.getItem(\"darkMode\") === 'true'){\r\n        return 'dark'\r\n      }else{\r\n        return 'light'\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    ThemeSettings.storeAppearance()\r\n    return (\r\n      \r\n    <React.Fragment>\r\n      <MuiThemeProvider theme={createMuiTheme({\r\n        palette: {\r\n          type: this.getDarkMode(),\r\n          primary: {\r\n            main: this.getPrimaryColour()\r\n          },\r\n          secondary: {\r\n            main: this.getSecondaryColour()\r\n          }\r\n        }\r\n      })}>\r\n\r\n      <Navbar title='Water Intake' searchField='true' />\r\n\r\n      <WaterIntakeView />\r\n\r\n      </MuiThemeProvider>\r\n    </React.Fragment>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n//Export class\r\nexport default WaterIntake; ","\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ReactPlayer from 'react-player';\r\n\r\nimport \"./landingPage.css\";\r\n\r\nclass LandingPage extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n\r\n      };\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (<div>\r\n          <div data-layer=\"c928f3c7-5250-4138-a83c-e25456bf8686\" className=\"landingPage\">        <div data-layer=\"5a6980cb-b6bf-4c62-aae8-fcb621d738fc\" className=\"background\"></div>\r\n        <div data-layer=\"d6ae205a-a0e8-4846-a627-9f79bdb5a0f8\" className=\"logoPng\"></div>\r\n        <div data-layer=\"5fe04d9c-2e45-40b5-9b1b-365638df499c\" className=\"beYourBest\">Be your best!</div>\r\n        <div data-layer=\"db4238ef-c62c-47fd-9ff0-8550d1e9e531\" className=\"home\"><a href=\"./home\">Home</a></div>\r\n        <div data-layer=\"86a65718-96bf-44f4-af17-77341978d82b\" className=\"signIn\"><a href=\"./app/login\">Sign in</a></div>\r\n        <div data-layer=\"f630dc31-7e1f-4466-8cf4-8b7fdfdc67df\" className=\"review\"><a href=\"./review\">Review</a></div>\r\n        <div data-layer=\"b8889e6b-4f00-4793-8372-cc9c30a98fde\" className=\"help\"><a href=\"./help\">Help</a></div>\r\n</div>\r\n\r\n<div className=\"video-wrapper\">\r\n<ReactPlayer url='Stock/intro.mp4' playing=\"true\" loop=\"true\" muted=\"true\" className=\"video\"/>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nLandingPage.propTypes = {\r\n\r\n}\r\n\r\nLandingPage.defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport default LandingPage;\r\n          ","\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../Hyperlinks.css\";\r\n\r\nimport \"./home.css\";\r\n\r\nclass About extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n\r\n      };\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (\r\n          <div data-layer=\"d23c8daa-0d9f-4576-aef7-3c1b4d55ef79\" className=\"about\">        <div data-layer=\"498884de-4f2e-4a53-9958-39c5f9207f12\" className=\"background\"></div>\r\n        <div data-layer=\"9732dac0-89fb-4f51-b158-d9019b645015\" className=\"logoPng\"></div>\r\n        <div data-layer=\"cfc26b5e-f1cc-4364-9006-17e8c8e314ce\" className=\"beYourBest\">Be your best!</div>\r\n        <div data-layer=\"1d7fcc49-717d-419c-8316-992c70b84a4c\" className=\"set6\"></div>\r\n        <div data-layer=\"e0cf441c-dbb8-4fec-904e-81112091c703\" className=\"fitifyIsAWebBasedApplicationThatHelpsUsersManageAndKeepTrackOfTheirWeightOutUltimateGoalIsToHelpPeopleAroundTheWorldBeInTheBestShapeTheyPossiblyCanBeWithOurEasyToUseFeatures\">Fitify is a web-based application that helps users manage and keep track of their weight. Out ultimate goal is to help people around the world be in the best shape they possibly can be with our easy to use features!  </div>\r\n        <div data-layer=\"a40d870c-45b7-4c5b-ab75-287acdfa4fdc\" className=\"someOfTheAwesomeFeaturesThatAreIncludedWithFitifyRecordingWeightStepCountCalorieIntakewithManyMoreToComeInTheFuture\">Some of the awesome features that are included with Fitify:<br />- Recording weight<br />- Step count<br />- Calorie intake<br /><br />With many more to come in the future!</div>\r\n        <div data-layer=\"be6d139f-c1d0-4817-9516-890bb57590d6\" className=\"whatIsFitify\">What is Fitify?</div>\r\n        <div data-layer=\"22170fe6-97f9-4bb7-bffe-1f58f794bc33\" className=\"fitifyFeatures\">Fitify features</div>\r\n        <div data-layer=\"d4a54f64-b36c-4924-86bb-35b307f9e00b\" className=\"rectangle3\"></div>\r\n        <div data-layer=\"3076fe46-55db-4966-a672-7586fb3e2a83\" className=\"home\"><a id=\"orangelink\" href=\"./home\">Home</a></div>\r\n        <div data-layer=\"d8cc1c99-ab6c-4170-84be-b3b7fff63103\" className=\"signIn\"><a id=\"orangelink\" href=\"./app/login\">Sign in</a></div>\r\n        <div data-layer=\"7414b399-2602-41da-ae09-7fed3c4dac36\" className=\"review\"><a id=\"orangelink\" href=\"./review\">Review</a></div>\r\n        <div data-layer=\"d8549f2e-1f16-427e-9d68-d308cf847a3d\" className=\"help\"><a id=\"orangelink\" href=\"./help\">Help</a></div>\r\n        <svg data-layer=\"029d0d9f-7e37-488b-b955-28dc0cc8d36f\" preserveAspectRatio=\"none\" viewBox=\"-2 -2 83 4\" className=\"line1\"><path d=\"M 0 0 L 79 0\"  /></svg>\r\n        <div data-layer=\"32ef4f59-e13d-4613-a6b6-74c72ca48abd\" className=\"getFit\"><a href=\"./app/login\">Get Fit</a></div>\r\n</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nAbout.propTypes = {\r\n\r\n}\r\n\r\nAbout.defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport default About;\r\n          ","\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../Hyperlinks.css\";\r\n\r\nimport \"./review.css\";\r\n\r\nclass Review extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n\r\n      };\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (\r\n          <div data-layer=\"bc3d6006-1c79-47bd-ade1-29747cdacd53\" className=\"review\">        <div data-layer=\"e5ab7f71-e921-459d-b1a5-ba5e8644c8eb\" className=\"background\"></div>\r\n        <div data-layer=\"b3f2c81e-efcd-466f-863b-aa585defe8d2\" className=\"logoPng\"></div>\r\n        <div data-layer=\"1b85dd37-d4e7-411a-969f-85ae48c84859\" className=\"beYourBest\">Be your best!</div>\r\n        <div data-layer=\"2fb56c17-bdf1-44ee-8225-49d7af9e0c84\" className=\"hereAtFitifyWeValueYourFeedbackToEnsureWeBringTheBestPossibleExperienceToYouWeWantYourJourneyOfGreatFitnessToBeAMemorableYetFulfillingOnetoEnsureThisWeWantToTakeAnyFormOfCritiqueYouMayHaveWeHaveProvided\">Here at Fitify, we value your feedback to ensure we bring the best possible experience to you. We want your journey of great fitness to be a memorable yet fulfilling one.<br /><br />To ensure this, we want to take any form of critique you may have. We have provided a review form for you to fill and to talk about any things you would want changing or to you may have encountered. If you have nothing but good things to say, then we are more than welcome to receive the warm compliments! Every review matters.</div>\r\n        <div data-layer=\"423bbcd8-2480-4bc7-a8cb-608fd89d4fba\" className=\"weValueYourFeedback\">We value your feedback</div>\r\n        <div data-layer=\"2ea0c00b-7554-4b46-acf7-eddbd917ca1f\" className=\"home\"><a id=\"orangelink\" href=\"./home\">Home</a></div>\r\n        <div data-layer=\"85c6a18e-e1d2-4032-9d77-498d44050bb5\" className=\"signIn\"><a id=\"orangelink\" href=\"./app/login\">Sign in</a></div>\r\n        <div data-layer=\"23716882-1ce6-421a-8809-93580baa5855\" className=\"review8bc95b58\"><a id=\"orangelink\" href=\"./review\">Review</a></div>\r\n        <div data-layer=\"cc4530bb-f8fa-44d7-92f9-0fe47cd40a0f\" className=\"help\"><a id=\"orangelink\" href=\"./help\">Help</a></div>\r\n        <svg data-layer=\"d68b603a-3faa-4bbc-9c80-daa1e321d4bc\" preserveAspectRatio=\"none\" viewBox=\"-2 -2 100 4\" className=\"line1\"><path d=\"M 0 0 L 96 0\"  /></svg>\r\n</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nReview.propTypes = {\r\n\r\n}\r\n\r\nReview.defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport default Review;\r\n          ","\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../Hyperlinks.css\";\r\n\r\nimport \"./help.css\";\r\n\r\nclass Help extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n\r\n      };\r\n  }\r\n  \r\n  render() {\r\n    \r\n    return (\r\n          <div data-layer=\"12f02607-438d-4bc4-91e3-34c2e71a7727\" className=\"help\">        <div data-layer=\"c0f86720-745b-410b-b1cf-76dba0ed8e87\" className=\"background\"></div>\r\n        <div data-layer=\"d967fbb4-afcf-4d98-91b9-0d1f91d70838\" className=\"logoPng\"></div>\r\n        <div data-layer=\"56db0a31-de2a-4959-9098-01be16b0a291\" className=\"beYourBest\">Be your best!</div>\r\n        <div data-layer=\"8c825ac7-2f8f-4681-8f2f-664f7ebd6b2c\" className=\"ifYouAreExperiencingTechnicalDifficultiesWithOurServicesPleaseDontHesitateToContactUsWeWillBeMoreThanWillingToHelpYouOutAndToProvideTheBestCareToResolveYourProblem\">If you are experiencing technical difficulties with our services, please don't hesitate to contact us. We will be more than willing to help you out and to provide the best care to resolve your problem.</div>\r\n        <div data-layer=\"70d4739f-51e6-404d-8df6-386de20b70d5\" className=\"needAssistance\">Need Assistance?</div>\r\n        <div data-layer=\"aeea2b90-5ed2-45cd-9c7d-986c1f879e02\" className=\"feelFreeToContactUsAndWeWillRespondToYouAsSoonAsWeCan\">Feel free to contact us and we will respond to you as soon as we can. </div>\r\n        <div data-layer=\"52e56e73-f079-4810-a4cb-3051271f044f\" className=\"contactUs\">Contact us</div>\r\n        <div data-layer=\"98c9080d-e135-4e12-9b26-11a91d1510b7\" className=\"home\"><a id=\"orangelink\" href=\"./home\">Home</a></div>\r\n        <div data-layer=\"2b19e254-98fc-410d-9c0e-faabd82be01a\" className=\"signIn\"><a id=\"orangelink\" href=\"./app/login\">Sign in</a></div>\r\n        <div data-layer=\"4583eae8-9d18-41bb-b9e7-2cd3b0084f69\" className=\"review\"><a id=\"orangelink\" href=\"./review\">Review</a></div>\r\n        <div data-layer=\"12790a36-338a-456f-85bb-c927ed8255c7\" className=\"help9ace59d5\"><a id=\"orangelink\" href=\"./help\">Help</a></div>\r\n        <svg data-layer=\"b64251b2-c507-4e46-8d4c-d8316d25d824\" preserveAspectRatio=\"none\" viewBox=\"-2 -2 66 4\" className=\"line1\"><path d=\"M 0 0 L 62 0\"  /></svg>\r\n        <div data-layer=\"8e3f2aae-d406-44b5-ac03-69eae6d27445\" className=\"tech\"></div>\r\n</div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nHelp.propTypes = {\r\n\r\n}\r\n\r\nHelp.defaultProps = {\r\n\r\n}\r\n\r\n\r\nexport default Help;\r\n          ","//Import React libraries including ReactRouter\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Route, Redirect, BrowserRouter as Router } from 'react-router-dom';\r\n\r\n//Stylesheets\r\nimport './components/main.css';\r\n\r\n//App Componenets\r\nimport Login from './pages/Login';\r\nimport Register from './pages/Register';\r\nimport Dashboard from './pages/Dashboard';\r\nimport Activities from './pages/Activities';\r\nimport Social from './pages/Social';\r\nimport Weight from './pages/Weight';\r\nimport Sleep from './pages/Sleep';\r\nimport Settings from './pages/Settings';\r\nimport Water from './pages/WaterIntake';\r\n\r\n// Static Components\r\nimport LandingPage from './static/Landing page/landingPage'\r\nimport HomePage from './static/Home page/home'\r\nimport ReviewPage from './static/Review page/review'\r\nimport HelpPage from './static/Help page/help'\r\n\r\n//Import Authentication class to determine if user is authenticated\r\nimport Authentication from './services/login/authentication';\r\n\r\n//Setup React Router routes\r\nconst routs = (\r\n   <Router>\r\n      <div>\r\n         <Route exact path=\"/\" component={LandingPage} />\r\n         <Route path=\"/home\" component={HomePage} />\r\n         <Route path=\"/help\" component={HelpPage} />\r\n         <Route path=\"/review\" component={ReviewPage} />\r\n         <RedirectRoute path=\"/app/login\" component={Login} />\r\n         <RedirectRoute path=\"/app/register\" component={Register} />\r\n         <AuthenticatedRoute path=\"/app/dashboard\" component={Dashboard} />\r\n         <AuthenticatedRoute path=\"/app/social\" component={Social} />\r\n         <AuthenticatedRoute path=\"/app/activities\" component={Activities} />\r\n         <AuthenticatedRoute path=\"/app/weight\" component={Weight} />\r\n         <AuthenticatedRoute path=\"/app/sleep\" component={Sleep} />\r\n         <AuthenticatedRoute path=\"/app/water\" component={Water} />\r\n         <AuthenticatedRoute path=\"/app/settings\" component={Settings} />\r\n      </div>\r\n   </Router>\r\n);\r\n\r\n//Authenticated Routing functionality\r\nfunction AuthenticatedRoute({ component: Component, ...rest }) {\r\n   return (\r\n     <Route {...rest} render={props => Authentication.getAuthenticationStatus() ? (<Component {...props} />) \r\n         : (\r\n           <Redirect to={{ pathname: \"/app/login\", state: { from: props.location } }} />\r\n         )\r\n       }\r\n     />\r\n   );\r\n}\r\n\r\n//Redirected Sign-on users to dashboard routing\r\nfunction RedirectRoute({ component: Component, ...rest }) {\r\n   return (\r\n     <Route {...rest} render={props => !Authentication.getAuthenticationStatus() ? (<Component {...props} />) \r\n         : (\r\n           <Redirect to={{ pathname: \"/app/dashboard\", state: { from: props.location } }} />\r\n         )\r\n       }\r\n     />\r\n   );\r\n}\r\n\r\n//Render the Routes in the document root\r\nReactDOM.render(routs, document.getElementById('root'));"],"sourceRoot":""}